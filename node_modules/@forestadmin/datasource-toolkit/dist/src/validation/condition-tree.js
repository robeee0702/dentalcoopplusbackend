"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rules_1 = require("./rules");
const errors_1 = require("../errors");
const collection_1 = __importDefault(require("../utils/collection"));
const branch_1 = __importDefault(require("../interfaces/query/condition-tree/nodes/branch"));
const leaf_1 = __importDefault(require("../interfaces/query/condition-tree/nodes/leaf"));
const field_1 = __importDefault(require("./field"));
const type_getter_1 = __importDefault(require("./type-getter"));
class ConditionTreeValidator {
    static validate(conditionTree, collection) {
        if (conditionTree instanceof branch_1.default) {
            ConditionTreeValidator.validateBranch(conditionTree, collection);
        }
        else if (conditionTree instanceof leaf_1.default) {
            ConditionTreeValidator.validateLeaf(conditionTree, collection);
        }
        else {
            throw new errors_1.ValidationError('Unexpected condition tree type');
        }
    }
    static validateBranch(branch, collection) {
        if (!['And', 'Or'].includes(branch.aggregator)) {
            throw new errors_1.ValidationError(`The given aggregator '${branch.aggregator}' ` +
                `is not supported. The supported values are: ['Or', 'And']`);
        }
        if (!Array.isArray(branch.conditions)) {
            throw new errors_1.ValidationError(`The given conditions '${branch.conditions}' were expected to be an array`);
        }
        for (const condition of branch.conditions) {
            ConditionTreeValidator.validate(condition, collection);
        }
    }
    static validateLeaf(leaf, collection) {
        const fieldSchema = collection_1.default.getFieldSchema(collection, leaf.field);
        ConditionTreeValidator.throwIfOperatorNotAllowedWithColumn(leaf, fieldSchema);
        ConditionTreeValidator.throwIfValueNotAllowedWithOperator(leaf, fieldSchema);
        ConditionTreeValidator.throwIfOperatorNotAllowedWithColumnType(leaf, fieldSchema);
        ConditionTreeValidator.throwIfValueNotAllowedWithColumnType(leaf, fieldSchema);
    }
    static throwIfOperatorNotAllowedWithColumn(conditionTree, columnSchema) {
        const operators = columnSchema.filterOperators;
        if (!operators?.has(conditionTree.operator)) {
            throw new errors_1.ValidationError(`The given operator '${conditionTree.operator}' ` +
                `is not supported by the column: '${conditionTree.field}'.\n${operators?.size
                    ? `The allowed types are: [${[...operators]}]`
                    : 'the column is not filterable'}`);
        }
    }
    static throwIfValueNotAllowedWithOperator(conditionTree, columnSchema) {
        const { value } = conditionTree;
        const valueType = type_getter_1.default.get(value, columnSchema.columnType);
        const allowedTypes = rules_1.MAP_ALLOWED_TYPES_FOR_OPERATOR[conditionTree.operator];
        if (!allowedTypes.includes(valueType)) {
            throw new errors_1.ValidationError(`The given value attribute '${JSON.stringify(value)} (type: ${valueType})' has an unexpected value ` +
                `for the given operator '${conditionTree.operator}'.\n` +
                `${allowedTypes.length === 0
                    ? 'The value attribute must be empty.'
                    : `The allowed types of the field value are: [${allowedTypes}].`}`);
        }
    }
    static throwIfOperatorNotAllowedWithColumnType(conditionTree, columnSchema) {
        const allowedOperators = rules_1.MAP_ALLOWED_OPERATORS_FOR_COLUMN_TYPE[columnSchema.columnType];
        if (!allowedOperators.includes(conditionTree.operator)) {
            throw new errors_1.ValidationError(`The given operator '${conditionTree.operator}' ` +
                `is not allowed with the columnType schema: '${columnSchema.columnType}'.\n` +
                `The allowed types are: [${allowedOperators}]`);
        }
    }
    static throwIfValueNotAllowedWithColumnType(conditionTree, columnSchema) {
        const { value, field } = conditionTree;
        const { columnType } = columnSchema;
        const allowedTypes = rules_1.MAP_ALLOWED_TYPES_FOR_COLUMN_TYPE[columnType];
        field_1.default.validateValue(field, columnSchema, value, allowedTypes);
    }
}
exports.default = ConditionTreeValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmFsaWRhdGlvbi9jb25kaXRpb24tdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLG1DQUlpQjtBQUNqQixzQ0FBNEM7QUFDNUMscUVBQWtEO0FBRWxELDZGQUFrRjtBQUNsRix5RkFBOEU7QUFDOUUsb0RBQXFDO0FBQ3JDLGdFQUF1QztBQUV2QyxNQUFxQixzQkFBc0I7SUFDekMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUE0QixFQUFFLFVBQXNCO1FBQ2xFLElBQUksYUFBYSxZQUFZLGdCQUFtQixFQUFFO1lBQ2hELHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDbEU7YUFBTSxJQUFJLGFBQWEsWUFBWSxjQUFpQixFQUFFO1lBQ3JELHNCQUFzQixDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDaEU7YUFBTTtZQUNMLE1BQU0sSUFBSSx3QkFBZSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7U0FDN0Q7SUFDSCxDQUFDO0lBRU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUEyQixFQUFFLFVBQXNCO1FBQy9FLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzlDLE1BQU0sSUFBSSx3QkFBZSxDQUN2Qix5QkFBeUIsTUFBTSxDQUFDLFVBQVUsSUFBSTtnQkFDNUMsMkRBQTJELENBQzlELENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxNQUFNLElBQUksd0JBQWUsQ0FDdkIseUJBQXlCLE1BQU0sQ0FBQyxVQUFVLGdDQUFnQyxDQUMzRSxDQUFDO1NBQ0g7UUFFRCxLQUFLLE1BQU0sU0FBUyxJ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