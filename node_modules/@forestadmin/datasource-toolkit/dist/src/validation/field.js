"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const types_1 = require("./types");
const type_getter_1 = __importDefault(require("./type-getter"));
class FieldValidator {
    static validate(collection, field, values) {
        const dotIndex = field.indexOf(':');
        if (dotIndex === -1) {
            const schema = collection.schema.fields[field];
            if (!schema) {
                throw new errors_1.ValidationError(`Column not found: '${collection.name}.${field}'`);
            }
            if (schema.type !== 'Column') {
                throw new errors_1.ValidationError(`Unexpected field type: '${collection.name}.${field}' ` +
                    `(found '${schema.type}' expected '${'Column'}')`);
            }
            if (values !== undefined) {
                values.forEach(value => FieldValidator.validateValue(field, schema, value));
            }
        }
        else {
            const prefix = field.substring(0, dotIndex);
            const schema = collection.schema.fields[prefix];
            if (!schema) {
                throw new errors_1.ValidationError(`Relation not found: '${collection.name}.${prefix}'`);
            }
            if (schema.type !== 'ManyToOne' && schema.type !== 'OneToOne') {
                throw new errors_1.ValidationError(`Unexpected field type: '${collection.name}.${prefix}' (found ` +
                    `'${schema.type}' expected '${'ManyToOne'}' or '${'OneToOne'}')`);
            }
            const suffix = field.substring(dotIndex + 1);
            const association = collection.dataSource.getCollection(schema.foreignCollection);
            FieldValidator.validate(association, suffix, values);
        }
    }
    static validateValue(field, schema, value, allowedTypes) {
        // FIXME: handle complex type from ColumnType
        if (typeof schema.columnType !== 'string') {
            return;
        }
        const type = type_getter_1.default.get(value, schema.columnType);
        if (schema.columnType === 'Enum') {
            FieldValidator.checkEnumValue(type, schema, value);
        }
        if (allowedTypes) {
            if (!allowedTypes.includes(type)) {
                throw new errors_1.ValidationError(`Wrong type for "${field}": ${value}. Expects [${allowedTypes}]`);
            }
        }
        else if (type !== schema.columnType) {
            throw new errors_1.ValidationError(`Wrong type for "${field}": ${value}. Expects ${schema.columnType}`);
        }
    }
    static checkEnumValue(type, columnSchema, enumValue) {
        let isEnumAllowed;
        if (type === types_1.ValidationTypesArray.Enum) {
            const enumValuesConditionTree = enumValue;
            isEnumAllowed = enumValuesConditionTree.every(value => columnSchema.enumValues.includes(value));
        }
        else {
            isEnumAllowed = columnSchema.enumValues.includes(enumValue);
        }
        if (!isEnumAllowed) {
            throw new errors_1.ValidationError(`The given enum value(s) [${enumValue}] is not listed in [${columnSchema.enumValues}]`);
        }
    }
}
exports.default = FieldValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmFsaWRhdGlvbi9maWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLHNDQUE0QztBQUM1QyxtQ0FBZ0U7QUFDaEUsZ0VBQXVDO0FBRXZDLE1BQXFCLGNBQWM7SUFDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFzQixFQUFFLEtBQWEsRUFBRSxNQUFrQjtRQUN2RSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXBDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ25CLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRS9DLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsTUFBTSxJQUFJLHdCQUFlLENBQUMsc0JBQXNCLFVBQVUsQ0FBQyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQzthQUM5RTtZQUVELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQzVCLE1BQU0sSUFBSSx3QkFBZSxDQUN2QiwyQkFBMkIsVUFBVSxDQUFDLElBQUksSUFBSSxLQUFLLElBQUk7b0JBQ3JELFdBQVcsTUFBTSxDQUFDLElBQUksZUFBZSxRQUFRLElBQUksQ0FDcEQsQ0FBQzthQUNIO1lBRUQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDN0U7U0FDRjthQUFNO1lBQ0wsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDNUMsTUFBTSxNQUFNLEdBQUcsVUFB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