"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("../../interfaces/query/condition-tree/nodes/operators");
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const collection_1 = __importDefault(require("../../utils/collection"));
const equivalence_1 = __importDefault(require("../../interfaces/query/condition-tree/equivalence"));
/**
 * Decorator which emulates filter operators from others.
 */
class OperatorsDecorator extends collection_decorator_1.default {
    refineSchema(childSchema) {
        const fields = {};
        for (const [name, schema] of Object.entries(childSchema.fields)) {
            if (schema.type === 'Column') {
                const newOperators = operators_1.allOperators.filter(operator => equivalence_1.default.hasEquivalentTree(operator, schema.filterOperators, schema.columnType));
                fields[name] = { ...schema, filterOperators: new Set(newOperators) };
            }
            else {
                fields[name] = schema;
            }
        }
        return { ...childSchema, fields };
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: filter.conditionTree?.replaceLeafs(leaf => {
                const schema = collection_1.default.getFieldSchema(this.childCollection, leaf.field);
                return equivalence_1.default.getEquivalentTree(leaf, schema.filterOperators, schema.columnType, caller.timezone);
            }),
        });
    }
}
exports.default = OperatorsDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL29wZXJhdG9ycy1yZXBsYWNlL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxxRkFBcUY7QUFDckYsbUZBQTBEO0FBQzFELHdFQUFxRDtBQUNyRCxvR0FBd0Y7QUFHeEY7O0dBRUc7QUFDSCxNQUFxQixrQkFBbUIsU0FBUSw4QkFBbUI7SUFDOUMsWUFBWSxDQUFDLFdBQTZCO1FBQzNELE1BQU0sTUFBTSxHQUFnQyxFQUFFLENBQUM7UUFFL0MsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQy9ELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQzVCLE1BQU0sWUFBWSxHQUFHLHdCQUFZLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQ2xELHFCQUF1QixDQUFDLGlCQUFpQixDQUN2QyxRQUFRLEVBQ1IsTUFBTSxDQUFDLGVBQWUsRUFDdEIsTUFBTSxDQUFDLFVBQVUsQ0FDbEIsQ0FDRixDQUFDO2dCQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLGVBQWUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2FBQ3RFO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7YUFDdkI7U0FDRjtRQUVELE9BQU8sRUFBRSxHQUFHLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRWtCLEtBQUssQ0FBQyxZQUFZLENBQ25DLE1BQWMsRUFDZCxNQUF3QjtRQUV4QixPQUFPLE1BQU0sRUFBRSxRQUFRLENBQUM7WUFDdEIsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN2RCxNQUFNLE1BQU0sR0FBRyxvQkFBZSxDQUFDLGNBQWMsQ0FDM0MsSUFBSSxDQUFDLGVBQWUsRUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FDSyxDQUFDO2dCQUVsQixPQUFPLHFCQUF1QixDQUFDLGlCQUFpQixDQUM5QyxJQUFJLEVBQ0osTUFBTSxDQUFDLGVBQWUsRUFDdEIsTUFBTSxDQUFDLFVBQVUsRUFDakIsTUFBTSxDQUFDLFFBQVEsQ0FDaEIsQ0FBQztZQUNKLENBQUMsQ0FBQztTQUNILENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQTNDRCxxQ0EyQ0MifQ==