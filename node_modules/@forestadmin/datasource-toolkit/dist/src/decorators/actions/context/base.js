"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const collection_context_1 = __importDefault(require("../../../context/collection-context"));
const async_1 = __importDefault(require("../../../utils/async"));
const projection_1 = __importDefault(require("../../../interfaces/query/projection"));
const projection_2 = __importDefault(require("../../../validation/projection"));
const record_1 = __importDefault(require("../../../utils/record"));
class ActionContext extends collection_context_1.default {
    constructor(collection, caller, formValue, filter, used) {
        super(collection, caller);
        this.formValues = formValue;
        this.filter = filter;
        this.reset();
        // Spy on which formValues are accessed to set-up change hooks
        if (used) {
            this.formValues = new Proxy(this.formValues, {
                get: (target, prop, receiver) => {
                    if (typeof prop === 'string')
                        used.add(prop);
                    return Reflect.get(target, prop, receiver);
                },
                set: () => {
                    throw new Error('formValues is readonly');
                },
            });
        }
    }
    /**
     * Get all the records selected by an action
     * @param fields An array of fields needed in the response
     * @example
     * .getRecords(['id', 'isActive', 'name']);
     */
    async getRecords(fields) {
        // This function just queues the request into this.queries, so that we can merge all calls
        // to getRecords() into a single one.
        // The call to setTimeout which resolve the promises will trigger only once all handlers in
        // the customer's form have been called as Promises are queued before calls to setTimeout
        // in Node.js event loop
        // @see https://dev.to/khaosdoctor/node-js-under-the-hood-3-deep-dive-into-the-event-loop-135d\
        //   #microtasks-and-macrotasks
        //   Ordering of micro/macro tasks in Node.js event loop
        //
        // @see https://github.com/graphql/dataloader
        //   A library from facebook from which this pattern is inspired.
        projection_2.default.validate(this.realCollection, fields);
        const deferred = new async_1.default();
        const projection = new projection_1.default(...fields);
        if (this.queries.length === 0)
            setTimeout(() => this.runQuery());
        this.queries.push({ projection, deferred });
        this.projection = this.projection.union(projection);
        return deferred.promise;
    }
    /**
     * Get all the records ids selected by an action
     */
    async getRecordIds() {
        const compositeIds = await this.getCompositeRecordIds();
        return compositeIds.map(id => id[0]);
    }
    /**
     * Get all the records ids (when the collection uses composite keys)
     */
    async getCompositeRecordIds() {
        const projection = new projection_1.default().withPks(this.realCollection);
        const records = await this.getRecords(projection);
        return records.map(r => record_1.default.getPrimaryKey(this.realCollection.schema, r));
    }
    async runQuery() {
        const { queries, projection } = this;
        this.reset();
        try {
            // Run a single query which contains all fields / relations which were requested by
            // the different calls made to getRecords
            const records = await this.collection.list(this.filter, projection);
            // Resolve each on of the promises only with the requested fields.
            for (const query of queries)
                query.deferred.resolve(query.projection.apply(records));
        }
        catch (e) {
            // Rejecting each promises at next tick
            // This ensures that we don't let any promise hanging forever if the customer throws in
            // the rejection handler.
            for (const query of queries) {
                process.nextTick(() => query.deferred.reject(e));
            }
        }
    }
    reset() {
        this.queries = [];
        this.projection = new projection_1.default();
    }
}
exports.default = ActionContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2FjdGlvbnMvY29udGV4dC9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsNkZBQWlGO0FBQ2pGLGlFQUE0QztBQUM1QyxzRkFBOEQ7QUFDOUQsZ0ZBQWlFO0FBQ2pFLG1FQUFnRDtBQUVoRCxNQUFxQixhQUduQixTQUFRLDRCQUFvQztJQU81QyxZQUNFLFVBQXNCLEVBQ3RCLE1BQWMsRUFDZCxTQUFxQixFQUNyQixNQUF5QixFQUN6QixJQUFrQjtRQUVsQixLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUViLDhEQUE4RDtRQUM5RCxJQUFJLElBQUksRUFBRTtZQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDM0MsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRTtvQkFDOUIsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRO3dCQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBRTdDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUM3QyxDQUFDO2dCQUNELEdBQUcsRUFBRSxHQUFHLEVBQUU7b0JBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2dCQUM1QyxDQUFDO2FBQ0YsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQTBCO1FBQ3pDLDBGQUEwRjtRQUMxRixxQ0FBcUM7UUFFckMsMkZBQTJGO1FBQzNGLHlGQUF5RjtRQUN6Rix3QkFBd0I7UUFFeEIsK0ZBQStGO1FBQy9GLCtCQUErQjtRQUMvQix3REFBd0Q7UUFDeEQsRUFBRTtRQUNGLDZDQUE2QztRQUM3QyxpRUFBaUU7UUFFakUsb0JBQW1CLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFMUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxlQUFRLEVBQWdCLENBQUM7UUFDOUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxvQkFBVSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFN0MsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwRCxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFlBQVk7UUFDaEIsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUV4RCxPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMscUJBQXFCO1FBQ3pCLE1BQU0sVUFBVSxHQUFHLElBQUksb0JBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFhLENBQUM7UUFDN0UsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQWdDLENBQUMsQ0FBQztRQUV4RSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFTyxLQUFLLENBQUMsUUFBUTtRQUNwQixNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNyQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFYixJQUFJO1lBQ0YsbUZBQW1GO1lBQ25GLHlDQUF5QztZQUN6QyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN4QyxJQUFJLENBQUMsTUFBTSxFQUNYLFVBQTRDLENBQzdDLENBQUM7WUFFRixrRUFBa0U7WUFDbEUsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPO2dCQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDdEY7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLHVDQUF1QztZQUV2Qyx1RkFBdUY7WUFDdkYseUJBQXlCO1lBQ3pCLEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxFQUFFO2dCQUMzQixPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbEQ7U0FDRjtJQUNILENBQUM7SUFFTyxLQUFLO1FBQ1gsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLG9CQUFVLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUF0SEQsZ0NBc0hDIn0=