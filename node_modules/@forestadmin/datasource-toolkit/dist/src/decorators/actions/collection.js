"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = __importDefault(require("./context/base"));
const single_1 = __importDefault(require("./context/single"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const result_builder_1 = __importDefault(require("./result-builder"));
class ActionCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.actions = {};
    }
    addAction(name, action) {
        this.actions[name] = action;
        this.markSchemaAsDirty();
    }
    async execute(caller, name, data, filter) {
        const action = this.actions[name];
        if (!action)
            return this.childCollection.execute(caller, name, data, filter);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const context = this.getContext(caller, action, data, filter);
        const resultBuilder = new result_builder_1.default();
        const result = await action.execute(context, resultBuilder);
        return (result || {
            type: 'Success',
            invalidated: new Set(),
            format: 'text',
            message: 'Success',
        });
    }
    async getForm(caller, name, data, filter) {
        const action = this.actions[name];
        if (!action)
            return this.childCollection.getForm(caller, name, data, filter);
        if (!action.form)
            return [];
        const formValues = data ? { ...data } : {};
        const used = new Set();
        const context = this.getContext(caller, action, formValues, filter, used);
        // Convert DynamicField to ActionField in successive steps.
        let dynamicFields;
        dynamicFields = action.form.map(c => ({ ...c }));
        dynamicFields = await this.dropDefaults(context, dynamicFields, !data, formValues);
        dynamicFields = await this.dropIfs(context, dynamicFields);
        const fields = await this.dropDeferred(context, dynamicFields);
        for (const field of fields) {
            // customer did not define a handler to rewrite the previous value => reuse current one.
            if (field.value === undefined)
                field.value = formValues[field.label];
            // fields that were accessed through the context.formValues.X getter should be watched.
            field.watchChanges = used.has(field.label);
        }
        return fields;
    }
    refineSchema(subSchema) {
        const newSchema = { ...subSchema, actions: { ...subSchema.actions } };
        for (const [name, { form, scope, generateFile }] of Object.entries(this.actions)) {
            // An action form can be send in the schema to avoid calling the load handler
            // as long as there is nothing dynamic in it.
            const isDynamic = form?.some(field => Object.values(field).some(value => typeof value === 'function'));
            newSchema.actions[name] = { scope, generateFile: !!generateFile, staticForm: !isDynamic };
        }
        return newSchema;
    }
    getContext(caller, action, formValues, filter, used) {
        return new {
            Global: base_1.default,
            Bulk: base_1.default,
            Single: single_1.default,
        }[action.scope](this, caller, formValues, filter, used);
    }
    async dropDefaults(context, fields, isFirstCall, data) {
        if (isFirstCall) {
            const defaults = await Promise.all(fields.map(field => this.evaluate(context, field.defaultValue)));
            fields.forEach((field, index) => {
                data[field.label] = defaults[index];
            });
        }
        fields.forEach(field => delete field.defaultValue);
        return fields;
    }
    async dropIfs(context, fields) {
        // Remove fields which have falsy if
        const ifValues = await Promise.all(fields.map(field => !field.if || this.evaluate(context, field.if)));
        const newFields = fields.filter((_, index) => ifValues[index]);
        newFields.forEach(field => delete field.if);
        return newFields;
    }
    async dropDeferred(context, fields) {
        const newFields = fields.map(async (field) => {
            const keys = Object.keys(field);
            const values = await Promise.all(Object.values(field).map(value => this.evaluate(context, value)));
            return keys.reduce((memo, key, index) => ({ ...memo, [key]: values[index] }), {});
        });
        return Promise.all(newFields);
    }
    async evaluate(context, value) {
        return typeof value === 'function' ? value(context) : value;
    }
}
exports.default = ActionCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2FjdGlvbnMvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQU1BLDBEQUEyQztBQUMzQyw4REFBbUQ7QUFDbkQsbUZBQTBEO0FBRzFELHNFQUE2QztBQUU3QyxNQUFxQix5QkFBMEIsU0FBUSw4QkFBbUI7SUFBMUU7O1FBR1UsWUFBTyxHQUEyQixFQUFFLENBQUM7SUFvSi9DLENBQUM7SUFsSkMsU0FBUyxDQUFDLElBQVksRUFBRSxNQUFjO1FBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzVCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFUSxLQUFLLENBQUMsT0FBTyxDQUNwQixNQUFjLEVBQ2QsSUFBWSxFQUNaLElBQWdCLEVBQ2hCLE1BQWM7UUFFZCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU3RSw4REFBOEQ7UUFDOUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQVEsQ0FBQztRQUNyRSxNQUFNLGFBQWEsR0FBRyxJQUFJLHdCQUFhLEVBQUUsQ0FBQztRQUMxQyxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRTVELE9BQU8sQ0FDTCxNQUFNLElBQUk7WUFDUixJQUFJLEVBQUUsU0FBa0I7WUFDeEIsV0FBVyxFQUFFLElBQUks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