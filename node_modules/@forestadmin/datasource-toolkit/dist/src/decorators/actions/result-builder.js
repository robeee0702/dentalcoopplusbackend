"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
class ResultBuilder {
    /**
     * Returns a success response from the action
     * @param message the success message to return
     * @param options available options to return
     * @example
     * .success('<blinkee>Success!</blinkee>', { type: 'html' });
     */
    success(message, options) {
        return {
            type: 'Success',
            message: message ?? 'Success',
            format: options?.type ?? 'text',
            invalidated: new Set(options?.invalidated ?? []),
        };
    }
    /**
     * Returns an error response from the action
     * @param message the error message to return
     * @example
     * .error('Failed to refund the customer!');
     */
    error(message) {
        return {
            type: 'Error',
            message: message ?? 'Error',
        };
    }
    /**
     * Returns a webhook that the UI will trigger
     * @param url the url of the webhook
     * @param method the HTTP method of the webhook
     * @param headers an object representing the list of headers to send with the webhook
     * @param body an object representing the body of the HTTP request
     * @example
     * .webhook('http://my-company-name', 'POST', {}, { adminToken: 'my-admin-token' });
     */
    webhook(url, method = 'POST', headers = {}, body = {}) {
        return {
            type: 'Webhook',
            url,
            method,
            headers,
            body,
        };
    }
    /**
     * Returns a file that will be downloaded
     * @param streamOrBufferOrString the actual file to download
     * @param name the name of the file
     * @param mimeType the mime type of the file
     * @example
     * .file('This is my file content', 'download.txt', 'text/plain');
     */
    file(streamOrBufferOrString, name = 'file', mimeType = 'application/octet-stream') {
        return {
            type: 'File',
            name,
            mimeType,
            stream: streamOrBufferOrString instanceof stream_1.Readable
                ? streamOrBufferOrString
                : stream_1.Readable.from([streamOrBufferOrString]),
        };
    }
    /**
     * Returns to the UI that a redirection is needed
     * @param path the path to redirect to
     * @example
     * .redirectTo('https://www.google.com');
     */
    redirectTo(path) {
        return { type: 'Redirect', path };
    }
}
exports.default = ResultBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9hY3Rpb25zL3Jlc3VsdC1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWtDO0FBSWxDLE1BQXFCLGFBQWE7SUFDaEM7Ozs7OztPQU1HO0lBQ0gsT0FBTyxDQUNMLE9BQWdCLEVBQ2hCLE9BQTREO1FBRTVELE9BQU87WUFDTCxJQUFJLEVBQUUsU0FBUztZQUNmLE9BQU8sRUFBRSxPQUFPLElBQUksU0FBUztZQUM3QixNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksSUFBSSxNQUFNO1lBQy9CLFdBQVcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxJQUFJLEVBQUUsQ0FBQztTQUNqRCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLE9BQWdCO1FBQ3BCLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxPQUFPLElBQUksT0FBTztTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsT0FBTyxDQUNMLEdBQVcsRUFDWCxTQUF5QixNQUFNLEVBQy9CLFVBQWtDLEVBQUUsRUFDcEMsT0FBZ0IsRUFBRTtRQUVsQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7WUFDZixHQUFHO1lBQ0gsTUFBTTtZQUNOLE9BQU87WUFDUCxJQUFJO1NBQ0wsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBSSxDQUNGLHNCQUFzRCxFQUN0RCxJQUFJLEdBQUcsTUFBTSxFQUNiLFFBQVEsR0FBRywwQkFBMEI7UUFFckMsT0FBTztZQUNMLElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSTtZQUNKLFFBQVE7WUFDUixNQUFNLEVBQ0osc0JBQXNCLFlBQVksaUJBQVE7Z0JBQ3hDLENBQUMsQ0FBQyxzQkFBc0I7Z0JBQ3hCLENBQUMsQ0FBQyxpQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDOUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFVBQVUsQ0FBQyxJQUFZO1FBQ3JCLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQTFGRCxnQ0EwRkMifQ==