import { CompositeId } from '../../../interfaces/record';
import { File, Json } from '../../../interfaces/action';
export declare type ValueOrHandler<Context = unknown, Result = unknown> = ((context: Context) => Promise<Result>) | ((context: Context) => Result) | Promise<Result> | Result;
interface BaseDynamicField<Type, Context, Result> {
    type: Type;
    label: string;
    description?: string;
    isRequired?: ValueOrHandler<Context, boolean>;
    isReadOnly?: ValueOrHandler<Context, boolean>;
    if?: ((context: Context) => Promise<unknown>) | ((context: Context) => unknown);
    value?: ValueOrHandler<Context, Result>;
    defaultValue?: ValueOrHandler<Context, Result>;
}
interface CollectionDynamicField<Context> extends BaseDynamicField<'Collection', Context, CompositeId> {
    collectionName: ValueOrHandler<Context, string>;
}
interface EnumDynamicField<Context> extends BaseDynamicField<'Enum', Context, string> {
    enumValues: ValueOrHandler<Context, string[]>;
}
interface EnumListDynamicField<Context> extends BaseDynamicField<'EnumList', Context, string[]> {
    enumValues: ValueOrHandler<Context, string[]>;
}
declare type BooleanDynamicField<Context> = BaseDynamicField<'Boolean', Context, boolean>;
declare type FileDynamicField<Context> = BaseDynamicField<'File', Context, File>;
declare type FileListDynamicField<Context> = BaseDynamicField<'FileList', Context, File[]>;
declare type JsonDynamicField<Context> = BaseDynamicField<'Json', Context, Json>;
declare type NumberDynamicField<Context> = BaseDynamicField<'Number', Context, number>;
declare type NumberListDynamicField<Context> = BaseDynamicField<'NumberList', Context, number[]>;
declare type StringDynamicField<Context> = BaseDynamicField<'Date' | 'Dateonly' | 'String', Context, string>;
declare type StringListDynamicField<Context> = BaseDynamicField<'StringList', Context, string[]>;
export declare type DynamicField<Context = unknown> = BooleanDynamicField<Context> | CollectionDynamicField<Context> | EnumDynamicField<Context> | EnumListDynamicField<Context> | FileDynamicField<Context> | FileListDynamicField<Context> | JsonDynamicField<Context> | NumberDynamicField<Context> | NumberListDynamicField<Context> | StringDynamicField<Context> | StringListDynamicField<Context>;
export {};
//# sourceMappingURL=fields.d.ts.map