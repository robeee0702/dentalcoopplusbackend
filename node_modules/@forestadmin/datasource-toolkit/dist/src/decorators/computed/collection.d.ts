import { Caller } from '../../interfaces/caller';
import { CollectionSchema } from '../../interfaces/schema';
import { ComputedDefinition } from './types';
import { RecordData } from '../../interfaces/record';
import Aggregation, { AggregateResult } from '../../interfaces/query/aggregation';
import CollectionDecorator from '../collection-decorator';
import DataSourceDecorator from '../datasource-decorator';
import Filter from '../../interfaces/query/filter/unpaginated';
import PaginatedFilter from '../../interfaces/query/filter/paginated';
import Projection from '../../interfaces/query/projection';
/** Decorator injects computed fields */
export default class ComputedCollection extends CollectionDecorator {
    readonly dataSource: DataSourceDecorator<ComputedCollection>;
    protected computeds: Record<string, ComputedDefinition>;
    registerComputed(name: string, computed: ComputedDefinition): void;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
    protected refineSchema(childSchema: CollectionSchema): CollectionSchema;
}
//# sourceMappingURL=collection.d.ts.map