import { Caller } from '../../interfaces/caller';
import { CollectionSchema } from '../../interfaces/schema';
import { Operator } from '../../interfaces/query/condition-tree/nodes/operators';
import { OperatorReplacer } from './types';
import CollectionDecorator from '../collection-decorator';
import DataSourceDecorator from '../datasource-decorator';
import PaginatedFilter from '../../interfaces/query/filter/paginated';
export default class OperatorsEmulate extends CollectionDecorator {
    readonly dataSource: DataSourceDecorator<OperatorsEmulate>;
    private readonly fields;
    emulateFieldOperator(name: string, operator: Operator): void;
    replaceFieldOperator(name: string, operator: Operator, replaceBy: OperatorReplacer): void;
    protected refineSchema(childSchema: CollectionSchema): CollectionSchema;
    protected refineFilter(caller: Caller, filter: PaginatedFilter): Promise<PaginatedFilter>;
    private replaceLeaf;
    private computeEquivalent;
}
//# sourceMappingURL=collection.d.ts.map