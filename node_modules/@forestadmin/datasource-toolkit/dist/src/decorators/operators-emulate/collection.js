"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const collection_context_1 = __importDefault(require("../../context/collection-context"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const base_1 = __importDefault(require("../../interfaces/query/condition-tree/nodes/base"));
const factory_1 = __importDefault(require("../../interfaces/query/condition-tree/factory"));
const condition_tree_1 = __importDefault(require("../../validation/condition-tree"));
const field_1 = __importDefault(require("../../validation/field"));
const paginated_1 = __importDefault(require("../../interfaces/query/filter/paginated"));
const schema_1 = __importDefault(require("../../utils/schema"));
class OperatorsEmulate extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.fields = new Map();
    }
    emulateFieldOperator(name, operator) {
        this.replaceFieldOperator(name, operator, null);
    }
    replaceFieldOperator(name, operator, replaceBy) {
        // Check that the collection can actually support our rewriting
        const pks = schema_1.default.getPrimaryKeys(this.childCollection.schema);
        pks.forEach(pk => {
            const schema = this.childCollection.schema.fields[pk];
            const operators = schema.filterOperators;
            if (!operators?.has('Equal') || !operators?.has('In')) {
                throw new Error(`Cannot override operators on collection '${this.name}': ` +
                    `the primary key columns must support 'Equal' and 'In' operators`);
            }
        });
        // Check that targeted field is valid
        const field = this.childCollection.schema.fields[name];
        field_1.default.validate(this, name);
        if (!field)
            throw new Error('Cannot replace operator for relation');
        // Mark the field operator as replaced.
        if (!this.fields.has(name))
            this.fields.set(name, new Map());
        this.fields.get(name).set(operator, replaceBy);
        this.markSchemaAsDirty();
    }
    refineSchema(childSchema) {
        const fields = {};
        for (const [name, schema] of Object.entries(childSchema.fields)) {
            if (this.fields.has(name)) {
                const column = schema;
                fields[name] = {
                    ...column,
                    filterOperators: new Set([
                        ...(column.filterOperators ?? []),
                        ...this.fields.get(name).keys(),
                    ]),
                };
            }
            else {
                fields[name] = schema;
            }
        }
        return { ...childSchema, fields };
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: await filter.conditionTree?.replaceLeafsAsync(leaf => this.replaceLeaf(caller, leaf, [])),
        });
    }
    async replaceLeaf(caller, leaf, replacements) {
        // ConditionTree is targeting a field on another collection => recurse.
        if (leaf.field.includes(':')) {
            const [prefix] = leaf.field.split(':');
            const schema = this.schema.fields[prefix];
            const association = this.dataSource.getCollection(schema.foreignCollection);
            const associationLeaf = await leaf
                .unnest()
                .replaceLeafsAsync(subLeaf => association.replaceLeaf(caller, subLeaf, replacements));
            return associationLeaf.nest(prefix);
        }
        return this.fields.get(leaf.field)?.has(leaf.operator)
            ? this.computeEquivalent(caller, leaf, replacements)
            : leaf;
    }
    async computeEquivalent(caller, leaf, replacements) {
        const handler = this.fields.get(leaf.field)?.get(leaf.operator);
        if (handler) {
            const replacementId = `${this.name}.${leaf.field}[${leaf.operator}]`;
            const subReplacements = [...replacements, replacementId];
            if (replacements.includes(replacementId)) {
                throw new Error(`Operator replacement cycle: ${subReplacements.join(' -> ')}`);
            }
            const result = await handler(leaf.value, new collection_context_1.default(this, caller));
            if (result) {
                let equivalent = result instanceof base_1.default ? result : factory_1.default.fromPlainObject(result);
                equivalent = await equivalent.replaceLeafsAsync(subLeaf => this.replaceLeaf(caller, subLeaf, subReplacements));
                condition_tree_1.default.validate(equivalent, this);
                return equivalent;
            }
        }
        // Query all records on the dataSource and emulate the filter.
        return factory_1.default.matchRecords(this.schema, leaf.apply(await this.list(caller, new paginated_1.default({}), leaf.projection.withPks(this)), this, caller.timezone));
    }
}
exports.default = OperatorsEmulate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL29wZXJhdG9ycy1lbXVsYXRlL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFTQSwwRkFBOEU7QUFDOUUsbUZBQTBEO0FBQzFELDRGQUE2RTtBQUM3RSw0RkFBaUY7QUFFakYscUZBQXFFO0FBRXJFLG1FQUFvRDtBQUNwRCx3RkFBc0U7QUFDdEUsZ0VBQTZDO0FBRTdDLE1BQXFCLGdCQUFpQixTQUFRLDhCQUFtQjtJQUFqRTs7UUFFbUIsV0FBTSxHQUFpRCxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBK0hwRixDQUFDO0lBN0hDLG9CQUFvQixDQUFDLElBQVksRUFBRSxRQUFrQjtRQUNuRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsb0JBQW9CLENBQUMsSUFBWSxFQUFFLFFBQWtCLEVBQUUsU0FBMkI7UUFDaEYsK0RBQStEO1FBQy9ELE1BQU0sR0FBRyxHQUFHLGdCQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNmLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQWlCLENBQUM7WUFDdEUsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztZQUV6QyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3JELE1BQU0sSUFBSSxLQUFLLENBQ2IsNENBQTRDLElBQUksQ0FBQyxJQUFJLEtBQUs7b0JBQ3hELGlFQUFp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