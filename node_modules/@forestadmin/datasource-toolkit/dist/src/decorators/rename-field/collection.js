"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
/**
 * This decorator renames fields.
 *
 * It works on one side, by rewriting all references to fields in aggregations, filters, projections
 * and on the other, by rewriting records and aggregation results which are returned by the
 * subCollection.
 */
class RenameFieldCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.fromChildCollection = {};
        this.toChildCollection = {};
    }
    /** Rename a field from the collection */
    renameField(currentName, newName) {
        if (!this.schema.fields[currentName]) {
            throw new Error(`No such field '${currentName}'`);
        }
        let initialName = currentName;
        // Revert previous renaming (avoids conflicts and need to recurse on this.toSubCollection).
        if (this.toChildCollection[currentName]) {
            const childName = this.toChildCollection[currentName];
            delete this.toChildCollection[currentName];
            delete this.fromChildCollection[childName];
            initialName = childName;
            this.markAllSchemaAsDirty();
        }
        // Do not update arrays if renaming is a no-op (ie: customer is cancelling a previous rename).
        if (initialName !== newName) {
            this.fromChildCollection[initialName] = newName;
            this.toChildCollection[newName] = initialName;
            this.markAllSchemaAsDirty();
        }
    }
    refineSchema(childSchema) {
        const fields = {};
        for (const [oldName, oldSchema] of Object.entries(childSchema.fields)) {
            const schema = { ...oldSchema };
            if (schema.type === 'ManyToOne') {
                schema.foreignKey = this.fromChildCollection[schema.foreignKey] ?? schema.foreignKey;
            }
            else if (schema.type === 'OneToMany' || schema.type === 'OneToOne') {
                const relation = this.dataSource.getCollection(schema.foreignCollection);
                schema.originKey = relation.fromChildCollection[schema.originKey] ?? schema.originKey;
            }
            else if (schema.type === 'ManyToMany') {
                const through = this.dataSource.getCollection(schema.throughCollection);
                schema.foreignKey = through.fromChildCollection[schema.foreignKey] ?? schema.foreignKey;
                schema.originKey = through.fromChildCollection[schema.originKey] ?? schema.originKey;
            }
            fields[this.fromChildCollection[oldName] ?? oldName] = schema;
        }
        return { ...childSchema, fields };
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: filter.conditionTree?.replaceFields(field => this.pathToChildCollection(field)),
            sort: filter.sort?.replaceClauses(clause => ({
                field: this.pathToChildCollection(clause.field),
                ascending: clause.ascending,
            })),
        });
    }
    async create(caller, records) {
        const newRecords = await super.create(caller, records.map(record => this.recordToChildCollection(record)));
        return newRecords.map(record => this.recordFromChildCollection(record));
    }
    async list(caller, filter, projection) {
        const childProjection = projection.replace(field => this.pathToChildCollection(field));
        const records = await super.list(caller, filter, childProjection);
        return records.map(record => this.recordFromChildCollection(record));
    }
    async update(caller, filter, patch) {
        return super.update(caller, filter, this.recordToChildCollection(patch));
    }
    async aggregate(caller, filter, aggregation, limit) {
        const rows = await super.aggregate(caller, filter, aggregation.replaceFields(f => this.pathToChildCollection(f)), limit);
        return rows.map(row => ({
            value: row.value,
            group: Object.entries(row.group).reduce((memo, [path, value]) => ({ ...memo, [this.pathFromChildCollection(path)]: value }), {}),
        }));
    }
    markAllSchemaAsDirty() {
        for (const collection of this.dataSource.collections) {
            collection.markSchemaAsDirty();
        }
    }
    /** Convert field path from child collection to this collection */
    pathFromChildCollection(childPath) {
        if (childPath.includes(':')) {
            const dotIndex = childPath.indexOf(':');
            const childField = childPath.substring(0, dotIndex);
            const thisField = this.fromChildCollection[childField] ?? childField;
            const schema = this.schema.fields[thisField];
            const relation = this.dataSource.getCollection(schema.foreignCollection);
            return `${thisField}:${relation.pathFromChildCollection(childPath.substring(dotIndex + 1))}`;
        }
        return this.fromChildCollection[childPath] ?? childPath;
    }
    /** Convert field path from this collection to child collection */
    pathToChildCollection(thisPath) {
        if (thisPath.includes(':')) {
            const dotIndex = thisPath.indexOf(':');
            const thisField = thisPath.substring(0, dotIndex);
            const schema = this.schema.fields[thisField];
            const relation = this.dataSource.getCollection(schema.foreignCollection);
            const childField = this.toChildCollection[thisField] ?? thisField;
            return `${childField}:${relation.pathToChildCollection(thisPath.substring(dotIndex + 1))}`;
        }
        return this.toChildCollection[thisPath] ?? thisPath;
    }
    /** Convert record from this collection to the child collection */
    recordToChildCollection(thisRecord) {
        const childRecord = {};
        for (const [thisField, value] of Object.entries(thisRecord)) {
            childRecord[this.toChildCollection[thisField] ?? thisField] = value;
        }
        return childRecord;
    }
    /** Convert record from the child collection to this collection */
    recordFromChildCollection(childRecord) {
        const { schema } = this;
        const thisRecord = {};
        for (const [childField, value] of Object.entries(childRecord)) {
            const thisField = this.fromChildCollection[childField] ?? childField;
            const fieldSchema = schema.fields[thisField];
            // Perform the mapping, recurse for relations.
            if (fieldSchema.type === 'Column') {
                thisRecord[thisField] = value;
            }
            else if (value === null) {
                thisRecord[thisField] = value;
            }
            else {
                const relation = this.dataSource.getCollection(fieldSchema.foreignCollection);
                thisRecord[thisField] = relation.recordFromChildCollection(value);
            }
        }
        return thisRecord;
    }
}
exports.default = RenameFieldCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,