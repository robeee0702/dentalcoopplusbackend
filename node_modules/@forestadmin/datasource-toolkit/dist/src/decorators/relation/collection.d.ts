import { Caller } from '../../interfaces/caller';
import { CollectionSchema, RelationSchema } from '../../interfaces/schema';
import { PartialRelationSchema } from './types';
import { RecordData } from '../../interfaces/record';
import Aggregation, { AggregateResult } from '../../interfaces/query/aggregation';
import CollectionDecorator from '../collection-decorator';
import DataSourceDecorator from '../datasource-decorator';
import Filter from '../../interfaces/query/filter/unpaginated';
import PaginatedFilter from '../../interfaces/query/filter/paginated';
import Projection from '../../interfaces/query/projection';
export default class RelationCollectionDecorator extends CollectionDecorator {
    readonly dataSource: DataSourceDecorator<RelationCollectionDecorator>;
    protected relations: Record<string, RelationSchema>;
    addRelation(name: string, partialJoint: PartialRelationSchema): void;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
    protected refineSchema(subSchema: CollectionSchema): CollectionSchema;
    protected refineFilter(caller: Caller, filter: PaginatedFilter): Promise<PaginatedFilter>;
    private relationWithOptionalFields;
    private checkForeignKeys;
    private checkOriginKeys;
    private static checkKeys;
    private static checkColumn;
    private rewriteField;
    private rewriteLeaf;
    private reprojectInPlace;
    private reprojectRelationInPlace;
}
//# sourceMappingURL=collection.d.ts.map