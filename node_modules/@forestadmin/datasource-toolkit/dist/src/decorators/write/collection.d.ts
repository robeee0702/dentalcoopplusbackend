import { Caller } from '../../interfaces/caller';
import { CollectionSchema } from '../../interfaces/schema';
import { RecordData } from '../../interfaces/record';
import { WriteDefinition } from './types';
import CollectionDecorator from '../collection-decorator';
import DataSourceDecorator from '../datasource-decorator';
import Filter from '../../interfaces/query/filter/unpaginated';
export default class WriteDecorator extends CollectionDecorator {
    private replacedDefinitions;
    readonly dataSource: DataSourceDecorator<WriteDecorator>;
    replaceFieldWriting(fieldName: string, definition: WriteDefinition): void;
    protected refineSchema(childSchema: CollectionSchema): CollectionSchema;
    create(caller: Caller, data: RecordData[]): Promise<RecordData[]>;
    update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    private applyDefinitionsAndCreate;
    private applyDefinitionsAndUpdate;
    private createRecord;
    private createOneToOneRelations;
    private createManyToOneRelations;
    private updateAllRelations;
    private getImpactedRecordByUpdate;
    private applyDefinitions;
    private getReplacedDefinitionsColumns;
    private getDefinitionResults;
    private static checkCyclicDependency;
    private getRelationFields;
    private getPatchWithoutRelations;
}
//# sourceMappingURL=collection.d.ts.map