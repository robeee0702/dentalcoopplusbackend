"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../../errors");
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const leaf_1 = __importDefault(require("../../interfaces/query/condition-tree/nodes/leaf"));
const unpaginated_1 = __importDefault(require("../../interfaces/query/filter/unpaginated"));
const projection_1 = __importDefault(require("../../interfaces/query/projection"));
const record_1 = __importDefault(require("../../validation/record"));
const schema_1 = __importDefault(require("../../utils/schema"));
const context_1 = __importDefault(require("./context"));
class WriteDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.replacedDefinitions = {};
    }
    replaceFieldWriting(fieldName, definition) {
        if (!Object.keys(this.schema.fields).includes(fieldName)) {
            throw new Error(`The given field "${fieldName}" does not exist on the ${this.name} collection.`);
        }
        this.replacedDefinitions[fieldName] = definition;
        this.markSchemaAsDirty();
    }
    refineSchema(childSchema) {
        const schema = { ...childSchema, fields: { ...childSchema.fields } };
        for (const name of Object.keys(this.replacedDefinitions)) {
            schema.fields[name].isReadOnly = false;
        }
        return schema;
    }
    async create(caller, data) {
        return Promise.all(data.map(record => this.applyDefinitionsAndCreate(caller, record)));
    }
    async update(caller, filter, patch) {
        await this.applyDefinitionsAndUpdate(caller, filter, patch);
    }
    async applyDefinitionsAndCreate(caller, record) {
        const patch = await this.applyDefinitions(caller, record, 'create');
        if (this.getRelationFields(patch, ['ManyToOne', 'OneToOne']).length === 0) {
            const result = await this.childCollection.create(caller, [patch]);
            return result[0];
        }
        const manyToOneRecords = await this.createManyToOneRelations(caller, patch);
        const createdRecord = await this.createRecord(caller, patch, manyToOneRecords);
        await this.createOneToOneRelations(caller, patch, createdRecord);
        return createdRecord;
    }
    async applyDefinitionsAndUpdate(caller, filter, patch) {
        const updatedPatch = await this.applyDefinitions(caller, patch, 'update');
        const relations = this.getRelationFields(updatedPatch, ['OneToOne', 'ManyToOne']);
        const idsList = await this.getImpactedRecordByUpdate(caller, relations, filter);
        await Promise.all([
            ...this.updateAllRelations(caller, idsList, updatedPatch),
            this.childCollection.update(caller, filter, this.getPatchWithoutRelations(updatedPatch, relations)),
        ]);
    }
    async createRecord(caller, patch, manyToOneRecords) {
        const refinedPatch = { ...patch };
        const manyToOneRelations = this.getRelationFields(patch, ['ManyToOne']);
        for (const [record] of manyToOneRecords) {
            const relationName = manyToOneRelations.shift();
            const relationSchema = this.schema.fields[relationName];
            delete refinedPatch[relationName];
            const relation = this.dataSource.getCollection(relationSchema.foreignCollection);
            const [pk] = schema_1.default.getPrimaryKeys(relation.schema);
            refinedPatch[relationSchema.foreignKey] = record[pk];
        }
        for (const relationName of this.getRelationFields(patch, ['OneToOne'])) {
            const relationSchema = this.schema.fields[relationName];
            delete refinedPatch[relationName];
            if (patch[relationSchema.originKey])
                delete refinedPatch[relationSchema.originKey];
        }
        const result = await this.childCollection.create(caller, [refinedPatch]);
        return result[0];
    }
    async createOneToOneRelations(caller, patch, createdRecord) {
        const requests = [];
        for (const oneToOneRelation of this.getRelationFields(patch, ['OneToOne'])) {
            const relationSchema = this.schema.fields[oneToOneRelation];
            const relationRecord = patch[oneToOneRelation];
            const relation = this.dataSource.getCollection(relationSchema.foreignCollection);
            const fk = relationSchema.originKey;
            if (patch[fk]) {
                const conditionTree = new leaf_1.default(fk, 'Equal', patch[fk]);
                const filter = new unpaginated_1.default({ conditionTree });
                const update = relation.update(caller, filter, relationRecord);
                requests.push(update);
            }
            else {
                const [pk] = schema_1.default.getPrimaryKeys(this.schema);
                requests.push(relation.create(caller, [{ ...relationRecord, [fk]: createdRecord[pk] }]));
            }
        }
        await Promise.all(requests);
    }
    createManyToOneRelations(caller, patch) {
        const resultsManyToOne = [];
        for (const relationName of this.getRelationFields(patch, ['ManyToOne'])) {
            const relationSchema = this.schema.fields[relationName];
            const relationRecord = patch[relationName];
            const fk = relationSchema.foreignKey;
            const relation = this.dataSource.getCollection(relationSchema.foreignCollection);
            if (patch[fk]) {
                const [pk] = schema_1.default.getPrimaryKeys(relation.schema);
                const updateWrapper = async () => {
                    const conditionTree = new leaf_1.default(pk, 'Equal', patch[fk]);
                    await relation.update(caller, new unpaginated_1.default({ conditionTree }), relationRecord);
                    return [{ [pk]: patch[fk] }];
                };
                resultsManyToOne.push(updateWrapper());
            }
            else {
                resultsManyToOne.push(relation.create(caller, [relationRecord]));
            }
        }
        return Promise.all(resultsManyToOne);
    }
    updateAllRelations(caller, listIds, patch) {
        const updates = [];
        const relations = this.getRelationFields(patch, ['OneToOne', 'ManyToOne']);
        for (const recordIds of listIds) {
            const relationName = relations.shift();
            const relationSchema = this.schema.fields[relationName];
            const relation = this.dataSource.getCollection(relationSchema.foreignCollection);
            const ids = recordIds.map(field => Object.values(field)[0]);
            let key;
            if (relationSchema.type === 'OneToOne') {
                key = relationSchema.originKey;
            }
            else {
                [key] = schema_1.default.getPrimaryKeys(relation.schema);
            }
            const idsFilter = new unpaginated_1.default({ conditionTree: new leaf_1.default(key, 'In', ids) });
            updates.push(relation.update(caller, idsFilter, patch[relationName]));
        }
        return updates;
    }
    async getImpactedRecordByUpdate(caller, relations, filter) {
        const records = [];
        for (const relationName of relations) {
            const relationSchema = this.schema.fields[relationName];
            let projection;
            if (relationSchema.type === 'OneToOne') {
                projection = new projection_1.default(...schema_1.default.getPrimaryKeys(this.schema));
            }
            else if (relationSchema.type === 'ManyToOne') {
                projection = new projection_1.default(relationSchema.foreignKey);
            }
            records.push(this.list(caller, filter, projection));
        }
        return Promise.all(records);
    }
    async applyDefinitions(caller, patch, action, stackCalls = []) {
        if (Object.keys(patch).length === 0)
            return {};
        const replacedDefinitionsColumns = this.getReplacedDefinitionsColumns(patch);
        WriteDecorator.checkCyclicDependency(replacedDefinitionsColumns, stackCalls);
        const patches = await this.getDefinitionResults(caller, patch, replacedDefinitionsColumns, action);
        const patchToExplore = {};
        const copyPatch = { ...patch };
        patches.forEach(recordData => {
            const setValueColumn = replacedDefinitionsColumns.shift();
            delete copyPatch[setValueColumn];
            if (!recordData)
                return;
            if (recordData.constructor === Object) {
                record_1.default.validate(this, recordData);
            }
            else {
                throw new Error(`The write handler of ${setValueColumn} should return an object or nothing.`);
            }
            for (const [columnName, value] of Object.entries(recordData)) {
                if (copyPatch[columnName]) {
                    throw new errors_1.ValidationError(`Conflict value on the field "${columnName}". It receives several values.`);
                }
                if (columnName === setValueColumn) {
                    copyPatch[columnName] = value;
                }
                else {
                    patchToExplore[columnName] = value;
                }
            }
        });
        return {
            ...copyPatch,
            ...(await this.applyDefinitions(caller, patchToExplore, action, stackCalls)),
        };
    }
    getReplacedDefinitionsColumns(patch) {
        const patchKeys = Object.keys(patch);
        return Object.keys(this.replacedDefinitions).filter(name => patchKeys.includes(name));
    }
    async getDefinitionResults(caller, patch, columns, action) {
        return Promise.all(columns.map(column => {
            const definition = this.replacedDefinitions[column];
            const context = new context_1.default(this, caller, action, { ...patch });
            return definition(patch[column], context);
        }));
    }
    static checkCyclicDependency(columns, stackCalls) {
        stackCalls.push(...columns);
        if (stackCalls.length !== [...new Set(stackCalls)].length) {
            throw new errors_1.ValidationError(`There is a cyclic dependency on the "${stackCalls.pop()}" column.`);
        }
    }
    getRelationFields(patch, types) {
        return Object.keys(patch).filter(field => types.includes(this.schema.fields[field]?.type));
    }
    getPatchWithoutRelations(patch, relations) {
        const copy = { ...patch };
        relations.forEach(relation => delete copy[relation]);
        return copy;
    }
}
exports.default = WriteDecorator;
//# sourceMappingURL=data:application/json;base64,