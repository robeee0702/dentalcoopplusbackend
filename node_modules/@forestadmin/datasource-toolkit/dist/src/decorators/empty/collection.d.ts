import { Caller } from '../../interfaces/caller';
import { RecordData } from '../../interfaces/record';
import Aggregation, { AggregateResult } from '../../interfaces/query/aggregation';
import CollectionDecorator from '../collection-decorator';
import Filter from '../../interfaces/query/filter/unpaginated';
import PaginatedFilter from '../../interfaces/query/filter/paginated';
import Projection from '../../interfaces/query/projection';
/**
 * Avoid performing useless database requests:
 * Using segments + scopes + filters + jointure emulation often yields requests which have
 * mutually exclusive conditions or empty "In" leafs.
 */
export default class EmptyCollectionDecorator extends CollectionDecorator {
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    delete(caller: Caller, filter: Filter): Promise<void>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
    private returnsEmptySet;
    private leafReturnsEmptySet;
    private orReturnsEmptySet;
    private andReturnsEmptySet;
}
//# sourceMappingURL=collection.d.ts.map