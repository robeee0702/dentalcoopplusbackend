"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const branch_1 = __importDefault(require("../../interfaces/query/condition-tree/nodes/branch"));
const leaf_1 = __importDefault(require("../../interfaces/query/condition-tree/nodes/leaf"));
/**
 * Avoid performing useless database requests:
 * Using segments + scopes + filters + jointure emulation often yields requests which have
 * mutually exclusive conditions or empty "In" leafs.
 */
class EmptyCollectionDecorator extends collection_decorator_1.default {
    async list(caller, filter, projection) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.list(caller, filter, projection);
        }
        return [];
    }
    async update(caller, filter, patch) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.update(caller, filter, patch);
        }
    }
    async delete(caller, filter) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.delete(caller, filter);
        }
    }
    async aggregate(caller, filter, aggregation, limit) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.aggregate(caller, filter, aggregation, limit);
        }
        return [];
    }
    returnsEmptySet(tree) {
        if (tree instanceof leaf_1.default) {
            return this.leafReturnsEmptySet(tree);
        }
        if (tree instanceof branch_1.default && tree.aggregator === 'Or') {
            return this.orReturnsEmptySet(tree.conditions);
        }
        if (tree instanceof branch_1.default && tree.aggregator === 'And') {
            return this.andReturnsEmptySet(tree.conditions);
        }
        return false;
    }
    leafReturnsEmptySet(leaf) {
        // Empty 'in` always return zero records.
        return leaf.operator === 'In' && leaf.value.length === 0;
    }
    orReturnsEmptySet(conditions) {
        // Or return no records when
        // - they have no conditions
        // - they have only conditions which return zero records.
        return conditions.length === 0 || conditions.every(c => this.returnsEmptySet(c));
    }
    andReturnsEmptySet(conditions) {
        // There is a leaf which returns zero records
        if (conditions.some(c => this.returnsEmptySet(c))) {
            return true;
        }
        // Scans for mutually exclusive conditions
        // (this a naive implementation, it will miss many occurences)
        const valuesByField = {};
        const leafs = conditions.filter(condition => condition instanceof leaf_1.default);
        for (const { field, operator, value } of leafs) {
            if (!valuesByField[field] && operator === 'Equal') {
                valuesByField[field] = [value];
            }
            else if (!valuesByField[field] && operator === 'In') {
                valuesByField[field] = value;
            }
            else if (valuesByField[field] && operator === 'Equal') {
                valuesByField[field] = valuesByField[field].includes(value) ? [value] : [];
            }
            else if (valuesByField[field] && operator === 'In') {
                valuesByField[field] = valuesByField[field].filter(v => value.includes(v));
            }
        }
        return Object.values(valuesByField).some(v => v.length === 0);
    }
}
exports.default = EmptyCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2VtcHR5L2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxtRkFBMEQ7QUFFMUQsZ0dBQXFGO0FBQ3JGLDRGQUFpRjtBQUtqRjs7OztHQUlHO0FBQ0gsTUFBcUIsd0JBQXlCLFNBQVEsOEJBQW1CO0lBQzlELEtBQUssQ0FBQyxJQUFJLENBQ2pCLE1BQWMsRUFDZCxNQUF1QixFQUN2QixVQUFzQjtRQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDL0MsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDL0M7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFUSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxNQUFjLEVBQUUsS0FBaUI7UUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQy9DLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVRLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBYyxFQUFFLE1BQWM7UUFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQy9DLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDO0lBRVEsS0FBSyxDQUFDLFNBQVMsQ0FDdEIsTUFBYyxFQUNkLE1BQWMsRUFDZCxXQUF3QixFQUN4QixLQUFjO1FBRWQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFl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