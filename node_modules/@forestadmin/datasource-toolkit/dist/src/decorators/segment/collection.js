"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const collection_context_1 = __importDefault(require("../../context/collection-context"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const base_1 = __importDefault(require("../../interfaces/query/condition-tree/nodes/base"));
const factory_1 = __importDefault(require("../../interfaces/query/condition-tree/factory"));
const condition_tree_1 = __importDefault(require("../../validation/condition-tree"));
class SegmentCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.segments = {};
    }
    addSegment(segmentName, definition) {
        this.segments[segmentName] = definition;
        this.markSchemaAsDirty();
    }
    refineSchema(subSchema) {
        return {
            ...subSchema,
            segments: [...subSchema.segments, ...Object.keys(this.segments)],
        };
    }
    async refineFilter(caller, filter) {
        if (!filter) {
            return null;
        }
        let { conditionTree, segment } = filter;
        if (segment && this.segments[segment]) {
            const definition = this.segments[segment];
            const result = typeof definition === 'function'
                ? await definition(new collection_context_1.default(this, caller))
                : await definition;
            const conditionTreeSegment = result instanceof base_1.default ? result : factory_1.default.fromPlainObject(result);
            condition_tree_1.default.validate(conditionTreeSegment, this);
            conditionTree = factory_1.default.intersect(conditionTree, conditionTreeSegment);
            segment = null;
        }
        return filter.override({ conditionTree, segment });
    }
}
exports.default = SegmentCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlZ21lbnQvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDBGQUE4RTtBQUM5RSxtRkFBMEQ7QUFDMUQsNEZBQTZFO0FBQzdFLDRGQUFpRjtBQUNqRixxRkFBcUU7QUFHckUsTUFBcUIsMEJBQTJCLFNBQVEsOEJBQW1CO0lBQTNFOztRQUNVLGFBQVEsR0FBMEMsRUFBRSxDQUFDO0lBMEMvRCxDQUFDO0lBeENDLFVBQVUsQ0FBQyxXQUFtQixFQUFFLFVBQTZCO1FBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFa0IsWUFBWSxDQUFDLFNBQTJCO1FBQ3pELE9BQU87WUFDTCxHQUFHLFNBQVM7WUFDWixRQUFRLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqRSxDQUFDO0lBQ0osQ0FBQztJQUVlLEtBQUssQ0FBQyxZQUFZLENBQ2hDLE1BQWMsRUFDZCxNQUF3QjtRQUV4QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBRXhDLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxNQUFNLE1BQU0sR0FDVixPQUFPLFVBQVUsS0FBSyxVQUFVO2dCQUM5QixDQUFDLENBQUMsTUFBTSxVQUFVLENBQUMsSUFBSSw0QkFBOEIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3BFLENBQUMsQ0FBQyxNQUFNLFVBQVUsQ0FBQztZQUV2QixNQUFNLG9CQUFvQixHQUN4QixNQUFNLFlBQVksY0FBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFvQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUxRix3QkFBc0IsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFNUQsYUFBYSxHQUFHLGlCQUFvQixDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztZQUNwRixPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBM0NELDZDQTJDQyJ9