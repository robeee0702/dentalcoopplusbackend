"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const factory_1 = __importDefault(require("../../interfaces/query/condition-tree/factory"));
const field_1 = __importDefault(require("../../validation/field"));
const unpaginated_1 = __importDefault(require("../../interfaces/query/filter/unpaginated"));
const record_1 = __importDefault(require("../../utils/record"));
const sort_1 = __importDefault(require("../../interfaces/query/sort"));
class SortEmulate extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.sorts = new Map();
    }
    emulateFieldSorting(name) {
        this.replaceFieldSorting(name, null);
    }
    replaceFieldSorting(name, equivalentSort) {
        field_1.default.validate(this, name);
        const field = this.childCollection.schema.fields[name];
        if (!field)
            throw new Error('Cannot replace sort on relation');
        this.sorts.set(name, equivalentSort ? new sort_1.default(...equivalentSort) : null);
        this.markSchemaAsDirty();
    }
    async list(caller, filter, projection) {
        const childFilter = filter.override({
            sort: filter.sort?.replaceClauses(clause => this.rewritePlainSortClause(clause)),
        });
        if (!childFilter.sort?.some(({ field }) => this.isEmulated(field))) {
            return this.childCollection.list(caller, childFilter, projection);
        }
        // Fetch the whole collection, but only with the fields we need to sort
        let referenceRecords;
        referenceRecords = await this.childCollection.list(caller, childFilter.override({ sort: null, page: null }), childFilter.sort.projection.withPks(this));
        referenceRecords = childFilter.sort.apply(referenceRecords);
        if (childFilter.page)
            referenceRecords = childFilter.page.apply(referenceRecords);
        // We now have the information we need to sort by the field
        const newFilter = new unpaginated_1.default({
            conditionTree: factory_1.default.matchRecords(this.schema, referenceRecords),
        });
        let records;
        records = await this.childCollection.list(caller, newFilter, projection.withPks(this));
        records = this.sortRecords(referenceRecords, records);
        records = projection.apply(records);
        return records;
    }
    refineSchema(childSchema) {
        const fields = {};
        for (const [name, schema] of Object.entries(childSchema.fields)) {
            fields[name] =
                this.sorts.has(name) && schema.type === 'Column' ? { ...schema, isSortable: true } : schema;
        }
        return { ...childSchema, fields };
    }
    sortRecords(referenceRecords, records) {
        const positionById = {};
        const sorted = new Array(records.length);
        for (const [index, record] of referenceRecords.entries()) {
            positionById[record_1.default.getPrimaryKey(this.schema, record).join('|')] = index;
        }
        for (const record of records) {
            const id = record_1.default.getPrimaryKey(this.schema, record).join('|');
            sorted[positionById[id]] = record;
        }
        return sorted;
    }
    rewritePlainSortClause(clause) {
        // Order by is targeting a field on another collection => recurse.
        if (clause.field.includes(':')) {
            const [prefix] = clause.field.split(':');
            const schema = this.schema.fields[prefix];
            const association = this.dataSource.getCollection(schema.foreignCollection);
            return new sort_1.default(clause)
                .unnest()
                .replaceClauses(subClause => association.rewritePlainSortClause(subClause))
                .nest(prefix);
        }
        // Field that we own: recursively replace using equivalent sort
        let equivalentSort = this.sorts.get(clause.field);
        if (equivalentSort) {
            if (!clause.ascending)
                equivalentSort = equivalentSort.inverse();
            return equivalentSort.replaceClauses(subClause => this.rewritePlainSortClause(subClause));
        }
        return new sort_1.default(clause);
    }
    isEmulated(path) {
        const index = path.indexOf(':');
        if (index === -1)
            return this.sorts.has(path);
        const { foreignCollection } = this.schema.fields[path.substring(0, index)];
        const association = this.dataSource.getCollection(foreignCollection);
        return association.isEmulated(path.substring(index + 1));
    }
}
exports.default = SortEmulate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NvcnQtZW11bGF0ZS9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBUUEsbUZBQTBEO0FBQzFELDRGQUFpRjtBQUVqRixtRUFBb0Q7QUFDcEQsNEZBQStEO0FBRy9ELGdFQUE2QztBQUM3Qyx1RUFBb0U7QUFFcEUsTUFBcUIsV0FBWSxTQUFRLDhCQUFtQjtJQUE1RDs7UUFFbUIsVUFBSyxHQUFzQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBaUh4RCxDQUFDO0lBL0dDLG1CQUFtQixDQUFDLElBQVk7UUFDOUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBWSxFQUFFLGNBQWlDO1FBQ2pFLGVBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQWlCLENBQUM7UUFDdkUsSUFBSSxDQUFDLEtBQUs7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7UUFFL0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxjQUFJLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVRLEtBQUssQ0FBQyxJQUFJLENBQ2pCLE1BQWMsRUFDZCxNQUF1QixFQUN2QixVQUFzQjtRQUV0QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ2xDLElBQUksRUFB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