import { Caller } from '../../interfaces/caller';
import { CollectionSchema } from '../../interfaces/schema';
import { RecordData } from '../../interfaces/record';
import CollectionDecorator from '../collection-decorator';
import DataSourceDecorator from '../datasource-decorator';
import PaginatedFilter from '../../interfaces/query/filter/paginated';
import Projection from '../../interfaces/query/projection';
import { PlainSortClause } from '../../interfaces/query/sort';
export default class SortEmulate extends CollectionDecorator {
    readonly dataSource: DataSourceDecorator<SortEmulate>;
    private readonly sorts;
    emulateFieldSorting(name: string): void;
    replaceFieldSorting(name: string, equivalentSort: PlainSortClause[]): void;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    protected refineSchema(childSchema: CollectionSchema): CollectionSchema;
    private sortRecords;
    private rewritePlainSortClause;
    private isEmulated;
}
//# sourceMappingURL=collection.d.ts.map