import { Caller } from '../interfaces/caller';
import { Chart } from '../interfaces/chart';
import { Collection, DataSource } from '../interfaces/collection';
import { DataSourceSchema } from '../interfaces/schema';
import BaseDataSource from '../base-datasource';
declare type CollectionDecoratorConstructor<CollectionDecorator> = {
    new (c: Collection, d: DataSource): CollectionDecorator;
};
export default class DataSourceDecorator<CollectionDecorator extends Collection = Collection> extends BaseDataSource<CollectionDecorator> {
    protected readonly childDataSource: DataSource;
    private readonly CollectionDecoratorCtor;
    private readonly addCollectionToChildDataSource;
    get schema(): DataSourceSchema;
    constructor(childDataSource: DataSource, CollectionDecoratorCtor: CollectionDecoratorConstructor<CollectionDecorator>);
    renderChart(caller: Caller, name: string): Promise<Chart>;
    private addCollectionObserver;
}
export {};
//# sourceMappingURL=datasource-decorator.d.ts.map