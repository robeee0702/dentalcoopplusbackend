import { Caller } from '../../interfaces/caller';
import { HookHandler, HookPosition, HookType, HooksContext } from './types';
import { RecordData } from '../../interfaces/record';
import Aggregation, { AggregateResult } from '../../interfaces/query/aggregation';
import CollectionDecorator from '../collection-decorator';
import Filter from '../../interfaces/query/filter/unpaginated';
import PaginatedFilter from '../../interfaces/query/filter/paginated';
import Projection from '../../interfaces/query/projection';
export default class CollectionHookDecorator extends CollectionDecorator {
    private hooks;
    addHook<P extends HookPosition = HookPosition, T extends HookType = HookType>(position: P, type: T, handler: HookHandler<HooksContext[P][T]>): void;
    create(caller: Caller, data: RecordData[]): Promise<RecordData[]>;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    delete(caller: Caller, filter: Filter): Promise<void>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
}
//# sourceMappingURL=collection.d.ts.map