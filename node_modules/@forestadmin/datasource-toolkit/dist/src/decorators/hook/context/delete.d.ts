import { Caller } from '../../../interfaces/caller';
import { Collection } from '../../../interfaces/collection';
import { TCollectionName, TSchema } from '../../../interfaces/templates';
import Filter, { PlainFilter } from '../../../interfaces/query/filter/unpaginated';
import HookContext from './hook';
export declare class HookBeforeDeleteContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookContext<S, N> {
    protected _filter: Filter;
    constructor(collection: Collection, caller: Caller, filter: Filter);
    get filter(): Readonly<PlainFilter<S, N>>;
}
export declare class InternalHookBeforeDeleteContext extends HookBeforeDeleteContext {
    getFilter(): Filter;
}
export declare class HookAfterDeleteContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookBeforeDeleteContext<S, N> {
}
//# sourceMappingURL=delete.d.ts.map