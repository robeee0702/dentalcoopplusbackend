import { Caller } from '../../../interfaces/caller';
import { Collection } from '../../../interfaces/collection';
import { RecordData } from '../../../interfaces/record';
import { TCollectionName, TRow, TSchema } from '../../../interfaces/templates';
import HookContext from './hook';
export declare class HookBeforeCreateContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookContext<S, N> {
    protected _data: RecordData[];
    constructor(collection: Collection, caller: Caller, data: RecordData[]);
    get data(): readonly TRow<S, N>[];
}
export declare class InternalHookBeforeCreateContext extends HookBeforeCreateContext {
    getData(): RecordData[];
}
export declare class HookAfterCreateContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookBeforeCreateContext<S, N> {
    private _records;
    constructor(collection: Collection, caller: Caller, data: RecordData[], records: RecordData[]);
    get records(): readonly TRow<S, N>[];
}
//# sourceMappingURL=create.d.ts.map