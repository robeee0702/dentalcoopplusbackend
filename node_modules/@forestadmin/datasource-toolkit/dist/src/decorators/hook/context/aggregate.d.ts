import { Caller } from '../../../interfaces/caller';
import { Collection } from '../../../interfaces/collection';
import { TCollectionName, TSchema } from '../../../interfaces/templates';
import Aggregation, { AggregateResult, PlainAggregation } from '../../../interfaces/query/aggregation';
import Filter, { PlainFilter } from '../../../interfaces/query/filter/unpaginated';
import HookContext from './hook';
export declare class HookBeforeAggregateContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookContext<S, N> {
    protected _filter: Filter;
    protected _aggregation: Aggregation;
    protected _limit: number;
    constructor(collection: Collection, caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number);
    get filter(): Readonly<PlainFilter<S, N>>;
    get aggregation(): Readonly<PlainAggregation<S, N>>;
    get limit(): number;
}
export declare class InternalHookBeforeAggregateContext extends HookBeforeAggregateContext {
    getFilter(): Filter;
    getAggregation(): Aggregation;
}
export declare class HookAfterAggregateContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookBeforeAggregateContext<S, N> {
    private _aggregateResult;
    constructor(collection: Collection, caller: Caller, filter: Filter, aggregation: Aggregation, aggregateResult: AggregateResult<S, N>[], limit?: number);
    get aggregateResult(): readonly AggregateResult<S, N>[];
}
//# sourceMappingURL=aggregate.d.ts.map