"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const collection_context_1 = __importDefault(require("../../context/collection-context"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const factory_1 = __importDefault(require("../../interfaces/query/condition-tree/factory"));
const leaf_1 = __importDefault(require("../../interfaces/query/condition-tree/nodes/leaf"));
class SearchCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.replacer = null;
    }
    replaceSearch(replacer) {
        this.replacer = replacer;
    }
    refineSchema(subSchema) {
        return { ...subSchema, searchable: true };
    }
    async refineFilter(caller, filter) {
        // Search string is not significant
        if (!filter?.search || SearchCollectionDecorator.checkEmptyString(filter.search)) {
            return filter.override({ search: null });
        }
        // Implement search ourselves
        if (this.replacer || !this.childCollection.schema.searchable) {
            const ctx = new collection_context_1.default(this, caller);
            let tree = this.defaultReplacer(filter.search, filter.searchExtended);
            if (this.replacer) {
                const plainTree = await this.replacer(filter.search, filter.searchExtended, ctx);
                tree = factory_1.default.fromPlainObject(plainTree);
            }
            // Note that if no fields are searchable with the provided searchString, the conditions
            // array might be empty, which will create a condition returning zero records
            // (this is the desired behavior).
            return filter.override({
                conditionTree: factory_1.default.intersect(filter.conditionTree, tree),
                search: null,
            });
        }
        // Let subcollection deal with the search
        return filter;
    }
    defaultReplacer(search, extended) {
        const searchableFields = SearchCollectionDecorator.getSearchFields(this.childCollection.schema, this.childCollection.dataSource, extended);
        const conditions = searchableFields
            .map(([field, schema]) => SearchCollectionDecorator.buildCondition(field, schema, search))
            .filter(Boolean);
        return factory_1.default.union(...conditions);
    }
    static buildCondition(field, schema, searchString) {
        const { columnType, enumValues } = schema;
        const isNumber = Number(searchString).toString() === searchString;
        const isUuid = (0, uuid_1.validate)(searchString);
        if (columnType === 'Number' && isNumber) {
            return new leaf_1.default(field, 'Equal', Number(searchString));
        }
        if (columnType === 'Enum') {
            const searchValue = SearchCollectionDecorator.lenientFind(enumValues, searchString);
            if (searchValue)
                return new leaf_1.default(field, 'Equal', searchValue);
        }
        if (columnType === 'String') {
            return new leaf_1.default(field, 'IContains', searchString);
        }
        if (columnType === 'Uuid' && isUuid) {
            return new leaf_1.default(field, 'Equal', searchString);
        }
        return null;
    }
    static lenientFind(enumValues, searchString) {
        return (enumValues?.find(v => v === searchString.trim()) ??
            enumValues?.find(v => v.toLocaleLowerCase() === searchString.toLocaleLowerCase().trim()));
    }
    static getSearchFields(schema, dataSource, searchExtended) {
        const fields = Object.entries(schema.fields);
        if (searchExtended)
            SearchCollectionDecorator.getDeepFields(dataSource, fields);
        return fields.filter(([, fieldSchema]) => SearchCollectionDecorator.isSearchable(fieldSchema));
    }
    static getDeepFields(dataSource, fields) {
        fields.forEach(([name, field]) => {
            if (field.type === 'ManyToOne' || field.type === 'OneToOne') {
                const related = dataSource.getCollection(field.foreignCollection);
                fields.push(...Object.entries(related.schema.fields).map(([subName, columnSchema]) => [`${name}:${subName}`, columnSchema]));
            }
        });
    }
    static checkEmptyString(searchString) {
        return searchString.trim().length === 0;
    }
    static isSearchable(schema) {
        if (schema.type === 'Column') {
            const { columnType, filterOperators } = schema;
            if (columnType === 'Enum' || columnType === 'Number' || columnType === 'Uuid') {
                return filterOperators?.has('Equal');
            }
            if (columnType === 'String') {
                return filterOperators?.has('IContains');
            }
        }
        return false;
    }
}
exports.default = SearchCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlYXJjaC9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQWdEO0FBTWhELDBGQUE4RTtBQUM5RSxtRkFBMEQ7QUFFMUQsNEZBQWlGO0FBQ2pGLDRGQUFpRjtBQUdqRixNQUFxQix5QkFBMEIsU0FBUSw4QkFBbUI7SUFBMUU7O1FBQ0UsYUFBUSxHQUFtQixJQUFJLENBQUM7SUEySWxDLENBQUM7SUF6SUMsYUFBYSxDQUFDLFFBQXdCO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFZSxZQUFZLENBQUMsU0FBMkI7UUFDdEQsT0FBTyxFQUFFLEdBQUcsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRWUsS0FBSyxDQUFDLFlBQVksQ0FDaEMsTUFBYyxFQUNkLE1BQXdCO1FBRXhCLG1DQUFtQztRQUNuQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sSUFBSSx5QkFBeUIsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDaEYsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDMUM7UUFFRCw2QkFBNkI7UUFDN0IsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQzVELE1BQU0sR0FBRyxHQUFHLElBQUksNEJBQThCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzdELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdEUsSUFBSSxJ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