"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const factory_1 = __importDefault(require("../interfaces/query/condition-tree/factory"));
const unpaginated_1 = __importDefault(require("../interfaces/query/filter/unpaginated"));
const factory_2 = __importDefault(require("../interfaces/query/filter/factory"));
const projection_1 = __importDefault(require("../interfaces/query/projection"));
const schema_1 = __importDefault(require("./schema"));
class CollectionUtils {
    static getFieldSchema(collection, path) {
        const { fields } = collection.schema;
        const index = path.indexOf(':');
        if (index === -1) {
            if (!fields[path])
                throw new Error(`Column not found '${collection.name}.${path}'`);
            return fields[path];
        }
        const associationName = path.substring(0, index);
        const schema = fields[associationName];
        if (!schema) {
            throw new Error(`Relation not found '${collection.name}.${associationName}'`);
        }
        if (schema.type !== 'ManyToOne' && schema.type !== 'OneToOne') {
            throw new Error(`Unexpected field type '${schema.type}': '${collection.name}.${associationName}'`);
        }
        return CollectionUtils.getFieldSchema(collection.dataSource.getCollection(schema.foreignCollection), path.substring(index + 1));
    }
    static getInverseRelation(collection, relationName) {
        const relation = collection.schema.fields[relationName];
        const foreignCollection = collection.dataSource.getCollection(relation.foreignCollection);
        const inverse = Object.entries(foreignCollection.schema.fields).find(([, field]) => {
            const isManyToManyInverse = field.type === 'ManyToMany' &&
                relation.type === 'ManyToMany' &&
                field.originKey === relation.foreignKey &&
                field.throughCollection === relation.throughCollection &&
                field.foreignKey === relation.originKey;
            const isManyToOneInverse = field.type === 'ManyToOne' &&
                (relation.type === 'OneToMany' || relation.type === 'OneToOne') &&
                field.foreignKey === relation.originKey;
            const isOtherInverse = (field.type === 'OneToMany' || field.type === 'OneToOne') &&
                relation.type === 'ManyToOne' &&
                field.originKey === relation.foreignKey;
            return ((isManyToManyInverse || isManyToOneInverse || isOtherInverse) &&
                field.foreignCollection === collection.name);
        });
        return inverse ? inverse[0] : null;
    }
    static getThroughOrigin(collection, relationName) {
        const relation = collection.schema.fields[relationName];
        if (relation.type !== 'ManyToMany')
            throw new Error('Relation must be many to many');
        const throughCollection = collection.dataSource.getCollection(relation.throughCollection);
        const originRelation = Object.entries(throughCollection.schema.fields).find(([, field]) => {
            return (field.type === 'ManyToOne' &&
                field.foreignCollection === collection.name &&
                field.foreignKey === relation.originKey &&
                field.foreignKeyTarget === relation.originKeyTarget);
        });
        return originRelation ? originRelation[0] : null;
    }
    static getThroughTarget(collection, relationName) {
        const relation = collection.schema.fields[relationName];
        if (relation.type !== 'ManyToMany')
            throw new Error('Relation must be many to many');
        const throughCollection = collection.dataSource.getCollection(relation.throughCollection);
        const foreignRelation = Object.entries(throughCollection.schema.fields).find(([, field]) => {
            return (field.type === 'ManyToOne' &&
                field.foreignCollection === relation.foreignCollection &&
                field.foreignKey === relation.foreignKey &&
                field.foreignKeyTarget === relation.foreignKeyTarget);
        });
        return foreignRelation ? foreignRelation[0] : null;
    }
    static async listRelation(collection, id, relationName, caller, foreignFilter, projection) {
        const relation = schema_1.default.getToManyRelation(collection.schema, relationName);
        const foreign = collection.dataSource.getCollection(relation.foreignCollection);
        // Optimization for many to many when there is not search/segment.
        if (relation.type === 'ManyToMany' && foreignFilter.isNestable) {
            const foreignRelation = CollectionUtils.getThroughTarget(collection, relationName);
            if (foreignRelation) {
                const through = collection.dataSource.getCollection(relation.throughCollection);
                const records = await through.list(caller, await factory_2.default.makeThroughFilter(collection, id, relationName, caller, foreignFilter), projection.nest(foreignRelation));
                return records.map(r => r[foreignRelation]);
            }
        }
        // Otherwise fetch the target table (this works with both relation types)
        return foreign.list(caller, await factory_2.default.makeForeignFilter(collection, id, relationName, caller, foreignFilter), projection);
    }
    static async aggregateRelation(collection, id, relationName, caller, foreignFilter, aggregation, limit) {
        const relation = schema_1.default.getToManyRelation(collection.schema, relationName);
        const foreign = collection.dataSource.getCollection(relation.foreignCollection);
        // Optimization for many to many when there is not search/segment (saves one query)
        if (relation.type === 'ManyToMany' && foreignFilter.isNestable) {
            const foreignRelation = CollectionUtils.getThroughTarget(collection, relationName);
            if (foreignRelation) {
                const through = collection.dataSource.getCollection(relation.throughCollection);
                const records = await through.aggregate(caller, await factory_2.default.makeThroughFilter(collection, id, relationName, caller, foreignFilter), aggregation.nest(foreignRelation), limit);
                // unnest aggregation result
                return records.map(({ value, group }) => ({
                    value,
                    group: Object.entries(group)
                        .map(([key, v]) => [key.substring(key.indexOf(':') + 1), v])
                        .reduce((memo, [key, v]) => ({ ...memo, [key]: v }), {}),
                }));
            }
        }
        // Otherwise fetch the target table (this works with both relation types)
        return foreign.aggregate(caller, await factory_2.default.makeForeignFilter(collection, id, relationName, caller, foreignFilter), aggregation, limit);
    }
    static async getValue(collection, caller, id, field) {
        const index = schema_1.default.getPrimaryKeys(collection.schema).indexOf(field);
        if (index !== -1)
            return id[index];
        const [record] = await collection.list(caller, new unpaginated_1.default({ conditionTree: factory_1.default.matchIds(collection.schema, [id]) }), new projection_1.default(field));
        return record[field];
    }
}
exports.default = CollectionUtils;
//# sourceMappingURL=data:application/json;base64,