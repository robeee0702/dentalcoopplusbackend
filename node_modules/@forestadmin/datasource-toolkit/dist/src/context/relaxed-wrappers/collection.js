"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const aggregation_1 = __importDefault(require("../../interfaces/query/aggregation"));
const factory_1 = __importDefault(require("../../interfaces/query/condition-tree/factory"));
const unpaginated_1 = __importDefault(require("../../interfaces/query/filter/unpaginated"));
const page_1 = __importDefault(require("../../interfaces/query/page"));
const paginated_1 = __importDefault(require("../../interfaces/query/filter/paginated"));
const projection_1 = __importDefault(require("../../interfaces/query/projection"));
const sort_1 = __importDefault(require("../../interfaces/query/sort"));
/** Collection wrapper which accepts plain objects in all methods */
class RelaxedCollection {
    constructor(collection, caller) {
        this.collection = collection;
        this.caller = caller;
    }
    /**
     * Execute a given action
     * @param name the name of the action
     * @param formValues the values of the form, if the action rely on an action form
     * @param filter the filter used to represent the selected records to use the action on
     * @example
     * .execute(
     *    'Refund',
     *    { reason: 'Article is broken' },
     *    {
     *      conditionTree: {
     *        field: 'id',
     *        operator: 'Equal',
     *        value: 1
     *      }
     *    }
     * );
     */
    execute(name, formValues, filter) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.execute(this.caller, name, formValues, filterInstance);
    }
    getForm(name, formValues, filter) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.getForm(this.caller, name, formValues, filterInstance);
    }
    /**
     * Create a list of records
     * @param data An array of records to create
     * @example
     * .create([
     *    { amountInEur: 150, description: 'Buy dvd' },
     *    { amountInEur: -100, description: 'Refund' },
     * ]);
     */
    create(data) {
        return this.collection.create(this.caller, data);
    }
    /**
     * List multiple records
     * @param filter the filter used to select the records to list
     * @param projection an array of fields name representing the data to select
     * @example
     * .list({
     *    conditionTree: {
     *      aggregator: 'And',
     *      conditions: [{
     *        field: 'amountInEur',
     *        operator: 'GreaterThan',
     *        value: 1000
     *      }, {
     *        field: 'description',
     *        operator: 'Contains',
     *        value: 'Refund',
     *      }],
     *      page: { limit: 10, skip: 0 },
     *      sort: [{ field: 'id', ascending: true }]
     *   }
     * }, ['id', 'amountInEur', 'description']);
     */
    list(filter, projection) {
        const filterInstance = this.buildPaginatedFilter(filter);
        const projectionInstance = this.buildProjection(projection);
        const rows = this.collection.list(this.caller, filterInstance, projectionInstance);
        return rows;
    }
    /**
     * Update a list of records
     * @param filter the filter that represent the list of records to update
     * @param patch the patch to apply on the selected records
     * @example
     * .update({
     *    conditionTree: {
     *      field: 'isActive',
     *      operator: 'Equal',
     *      value: false
     *    },
     * }, { isActive: true });
     */
    update(filter, patch) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.update(this.caller, filterInstance, patch);
    }
    /**
     * Delete a list of records
     * @param filter the filter that represent the list of records to update
     * @example
     * .delete({
     *    conditionTree: {
     *      field: 'isBlocked',
     *      operator: 'Equal',
     *      value: false,
     *    },
     * });
     */
    delete(filter) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.delete(this.caller, filterInstance);
    }
    /**
     * Aggregate a list of records
     * @param filter the filter used to list the records to aggregate
     * @param aggregation the aggregation to apply
     * @param limit the maximum number of result to return
     * @example
     * .aggregate({
     *    conditionTree: {
     *      field: "user:company:id",
     *      operator: "In",
     *      value: records.map((r) => r.id),
     *    },
     * }, {
     *    operation: "Sum",
     *    field: "amountInEur",
     *    groups: [{ field: "user:company:id" }],
     * }, 10);
     */
    aggregate(filter, aggregation, limit) {
        const filterInstance = this.buildFilter(filter);
        const aggregationInstance = this.buildAggregation(aggregation);
        return this.collection.aggregate(this.caller, filterInstance, aggregationInstance, limit);
    }
    buildFilter(filter) {
        return filter
            ? new unpaginated_1.default({
                ...filter,
                conditionTree: filter.conditionTree
                    ? factory_1.default.fromPlainObject(filter.conditionTree)
                    : undefined,
            })
            : null;
    }
    buildPaginatedFilter(filter) {
        return new paginated_1.default({
            ...filter,
            conditionTree: filter?.conditionTree
                ? factory_1.default.fromPlainObject(filter.conditionTree)
                : undefined,
            sort: filter.sort ? new sort_1.default(...filter.sort) : undefined,
            page: filter.page ? new page_1.default(filter.page.skip, filter.page.limit) : undefined,
        });
    }
    buildProjection(projection) {
        return new projection_1.default(...projection);
    }
    buildAggregation(aggregation) {
        return new aggregation_1.default(aggregation);
    }
}
exports.default = RelaxedCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb250ZXh0L3JlbGF4ZWQtd3JhcHBlcnMvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQVlBLHFGQUFvRztBQUNwRyw0RkFBaUY7QUFDakYsNEZBQWdGO0FBQ2hGLHVFQUErQztBQUMvQyx3RkFBZ0c7QUFDaEcsbUZBQTJEO0FBQzNELHVFQUErQztBQUUvQyxvRUFBb0U7QUFDcEUsTUFBcUIsaUJBQWlCO0lBT3BDLFlBQVksVUFBc0IsRUFBRSxNQUFjO1FBQ2hELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSCxPQUFPLENBQUMsSUFBWSxFQUFFLFVBQXNCLEVBQUUsTUFBMEI7UUFDdEUsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsT0FBTyxDQUNMLElBQVksRUFDWixVQUF1QixFQUN2QixNQUEwQjtRQUUxQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILE1BQU0sQ0FBQyxJQUF3QjtRQUM3QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElB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