import { ActionField, ActionResult } from './interfaces/action';
import { ActionSchema, CollectionSchema, FieldSchema } from './interfaces/schema';
import { Caller } from './interfaces/caller';
import { Collection, DataSource } from './interfaces/collection';
import { RecordData } from './interfaces/record';
import Aggregation, { AggregateResult } from './interfaces/query/aggregation';
import Filter from './interfaces/query/filter/unpaginated';
import PaginatedFilter from './interfaces/query/filter/paginated';
import Projection from './interfaces/query/projection';
export default abstract class BaseCollection implements Collection {
    readonly dataSource: DataSource;
    readonly name: string;
    readonly schema: CollectionSchema;
    constructor(name: string, datasource: DataSource);
    protected addAction(name: string, schema: ActionSchema): void;
    protected addField(name: string, schema: FieldSchema): void;
    protected addFields(fields: {
        [fieldName: string]: FieldSchema;
    }): void;
    protected addSegments(segments: string[]): void;
    protected enableCount(): void;
    protected enableSearch(): void;
    abstract create(caller: Caller, data: RecordData[]): Promise<RecordData[]>;
    abstract list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    abstract update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    abstract delete(caller: Caller, filter: Filter): Promise<void>;
    abstract aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
    execute(caller: Caller, name: string): Promise<ActionResult>;
    getForm(): Promise<ActionField[]>;
}
//# sourceMappingURL=base-collection.d.ts.map