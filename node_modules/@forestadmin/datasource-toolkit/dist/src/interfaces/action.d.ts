/// <reference types="node" />
import { Readable } from 'stream';
export declare type Json = string | number | boolean | {
    [x: string]: Json;
} | Array<Json>;
export declare type File = {
    mimeType: string;
    buffer: Buffer;
    name: string;
    charset?: string;
};
export interface ActionField {
    type: ActionFieldType;
    label: string;
    description?: string;
    isRequired?: boolean;
    isReadOnly?: boolean;
    value?: unknown;
    watchChanges: boolean;
    enumValues?: string[];
    collectionName?: string;
}
export declare type ActionFieldType = 'Boolean' | 'Collection' | 'Date' | 'Dateonly' | 'Enum' | 'File' | 'Json' | 'Number' | 'String' | 'EnumList' | 'FileList' | 'NumberList' | 'StringList';
export declare type SuccessResult = {
    type: 'Success';
    message: string;
    format: 'html' | 'text';
    invalidated: Set<string>;
};
export declare type ErrorResult = {
    type: 'Error';
    message: string;
};
export declare type WebHookResult = {
    type: 'Webhook';
    url: string;
    method: 'GET' | 'POST';
    headers: {
        [key: string]: string;
    };
    body: unknown;
};
export declare type FileResult = {
    type: 'File';
    mimeType: string;
    name: string;
    stream: Readable;
};
export declare type RedirectResult = {
    type: 'Redirect';
    path: string;
};
export declare type ActionResult = SuccessResult | ErrorResult | WebHookResult | FileResult | RedirectResult;
//# sourceMappingURL=action.d.ts.map