import { TCollectionName, TSchema } from '../../templates';
import ConditionTree, { PlainConditionTree } from '../condition-tree/nodes/base';
export declare type FilterComponents = {
    conditionTree?: ConditionTree;
    search?: string;
    searchExtended?: boolean;
    segment?: string;
};
export declare type PlainFilter<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> = {
    conditionTree?: PlainConditionTree<S, N>;
    search?: string;
    searchExtended?: boolean;
    segment?: string;
};
export default class Filter {
    conditionTree?: ConditionTree;
    search?: string;
    searchExtended?: boolean;
    segment?: string;
    get isNestable(): boolean;
    constructor(parts: FilterComponents);
    override(fields: FilterComponents): Filter;
    nest(prefix: string): Filter;
}
//# sourceMappingURL=unpaginated.d.ts.map