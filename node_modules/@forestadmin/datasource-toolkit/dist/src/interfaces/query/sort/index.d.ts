import { RecordData } from '../../record';
import { TCollectionName, TFieldName, TSchema } from '../../templates';
import Projection from '../projection';
export declare type PlainSortClause<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> = {
    field: TFieldName<S, N>;
    ascending: boolean;
};
export default class Sort extends Array<{
    field: string;
    ascending: boolean;
}> {
    get projection(): Projection;
    replaceClauses(callback: (clause: PlainSortClause) => Sort | PlainSortClause[] | PlainSortClause): Sort;
    nest(prefix: string): Sort;
    inverse(): Sort;
    unnest(): Sort;
    apply(records: RecordData[]): RecordData[];
}
//# sourceMappingURL=index.d.ts.map