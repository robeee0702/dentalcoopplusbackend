"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("./operators");
const collection_1 = __importDefault(require("../../../../utils/collection"));
const base_1 = __importDefault(require("./base"));
const equivalence_1 = __importDefault(require("../equivalence"));
const factory_1 = __importDefault(require("../factory"));
const projection_1 = __importDefault(require("../../projection"));
const record_1 = __importDefault(require("../../../../utils/record"));
class ConditionTreeLeaf extends base_1.default {
    constructor(field, operator, value) {
        super();
        this.field = field;
        this.operator = operator;
        this.value = value;
    }
    get projection() {
        return new projection_1.default(this.field);
    }
    get useIntervalOperator() {
        return operators_1.intervalOperators.includes(this.operator);
    }
    forEachLeaf(handler) {
        handler(this);
    }
    everyLeaf(handler) {
        return handler(this);
    }
    someLeaf(handler) {
        return handler(this);
    }
    inverse() {
        if (operators_1.allOperators.includes(`Not${this.operator}`)) {
            return this.override({ operator: `Not${this.operator}` });
        }
        if (this.operator.startsWith('Not')) {
            return this.override({ operator: this.operator.substring(3) });
        }
        switch (this.operator) {
            case 'Blank':
                return this.override({ operator: 'Present' });
            case 'Present':
                return this.override({ operator: 'Blank' });
            default:
                throw new Error(`Operator '${this.operator}' cannot be inverted.`);
        }
    }
    replaceLeafs(handler, bind) {
        const result = handler.call(bind, this);
        return result instanceof base_1.default ? result : factory_1.default.fromPlainObject(result);
    }
    async replaceLeafsAsync(handler, bind) {
        const result = await handler.call(bind, this);
        return result instanceof base_1.default ? result : factory_1.default.fromPlainObject(result);
    }
    match(record, collection, timezone) {
        const fieldValue = record_1.default.getFieldValue(record, this.field);
        const { columnType } = collection_1.default.getFieldSchema(collection, this.field);
        switch (this.operator) {
            case 'Equal':
                return fieldValue == this.value; // eslint-disable-line eqeqeq
            case 'LessThan':
                return fieldValue < this.value;
            case 'GreaterThan':
                return fieldValue > this.value;
            case 'Like':
                return this.like(fieldValue, this.value, true);
            case 'ILike':
                return this.like(fieldValue, this.value, false);
            case 'LongerThan':
                return fieldValue.length > this.value;
            case 'ShorterThan':
                return fieldValue.length < this.value;
            case 'IncludesAll':
                return !!this.value?.every(v => fieldValue?.includes(v));
            case 'NotEqual':
            case 'NotContains':
                return !this.inverse().match(record, collection, timezone);
            default:
                return equivalence_1.default.getEquivalentTree(this, new Set(operators_1.uniqueOperators), columnType, timezone).match(record, collection, timezone);
        }
    }
    override(params) {
        return factory_1.default.fromPlainObject({ ...this, ...params });
    }
    unnest() {
        return super.unnest();
    }
    /** @see https://stackoverflow.com/a/18418386/1897495 */
    like(value, pattern, caseSensitive) {
        if (!value)
            return false;
        let regexp = pattern;
        // eslint-disable-next-line no-useless-escape
        regexp = regexp.replace(/([\.\\\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:\-])/g, '\\$1');
        regexp = regexp.replace(/%/g, '.*').replace(/_/g, '.');
        return RegExp(`^${regexp}$`, caseSensitive ? 'g' : 'gi').test(value);
    }
}
exports.default = ConditionTreeLeaf;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL3F1ZXJ5L2NvbmRpdGlvbi10cmVlL25vZGVzL2xlYWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSwyQ0FBeUY7QUFHekYsOEVBQTJEO0FBQzNELGtEQUEyRDtBQUMzRCxpRUFBcUQ7QUFDckQseURBQThDO0FBQzlDLGtFQUEwQztBQUMxQyxzRUFBbUQ7QUFpQm5ELE1BQXFCLGlCQUFrQixTQUFRLGNBQWE7SUFhMUQsWUFBWSxLQUFhLEVBQUUsUUFBa0IsRUFBRSxLQUFlO1FBQzVELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQWJELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxvQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxtQkFBbUI7UUFDckIsT0FBTyw2QkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQTRDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBU0QsV0FBVyxDQUFDLE9BQXFCO1FBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQW1CO1FBQzNCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBbUI7UUFDMUIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLHdCQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBYyxDQUFDLEVBQUU7WUFDNUQsT0FB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