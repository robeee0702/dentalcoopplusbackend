import { CollectionSchema } from '../../schema';
import { CompositeId, RecordData } from '../../record';
import { Operator } from './nodes/operators';
import ConditionTree from './nodes/base';
import { Aggregator } from './nodes/branch';
declare type GenericTree = {
    aggregator: Aggregator;
    conditions: Array<GenericTree>;
} | {
    field: string;
    operator: Operator;
    value?: unknown;
};
export default class ConditionTreeFactory {
    static MatchNone: ConditionTree;
    static MatchAll: ConditionTree;
    static matchRecords(schema: CollectionSchema, records: RecordData[]): ConditionTree;
    static matchIds(schema: CollectionSchema, ids: CompositeId[]): ConditionTree;
    static union(...trees: ConditionTree[]): ConditionTree;
    static intersect(...trees: ConditionTree[]): ConditionTree;
    static fromPlainObject(json: GenericTree): ConditionTree;
    private static matchFields;
    private static group;
    private static isLeaf;
    private static isBranch;
}
export {};
//# sourceMappingURL=factory.d.ts.map