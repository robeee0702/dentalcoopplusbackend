import { Operator } from './query/condition-tree/nodes/operators';
export declare type ActionScope = 'Single' | 'Bulk' | 'Global';
export declare type ActionSchema = {
    scope: ActionScope;
    generateFile?: boolean;
    staticForm?: boolean;
};
export declare type DataSourceSchema = {
    charts: string[];
};
export declare type CollectionSchema = {
    actions: {
        [actionName: string]: ActionSchema;
    };
    countable: boolean;
    fields: {
        [fieldName: string]: FieldSchema;
    };
    searchable: boolean;
    segments: string[];
};
export declare type RelationSchema = ManyToOneSchema | OneToManySchema | OneToOneSchema | ManyToManySchema;
export declare type FieldSchema = ColumnSchema | RelationSchema;
export declare type ColumnSchema = {
    columnType: ColumnType;
    filterOperators?: Set<Operator>;
    defaultValue?: unknown;
    enumValues?: string[];
    isPrimaryKey?: boolean;
    isReadOnly?: boolean;
    isSortable?: boolean;
    type: 'Column';
    validation?: Array<{
        operator: Operator;
        value?: unknown;
    }>;
};
export declare type ManyToOneSchema = {
    foreignCollection: string;
    foreignKey: string;
    foreignKeyTarget: string;
    type: 'ManyToOne';
};
export declare type OneToManySchema = {
    foreignCollection: string;
    originKey: string;
    originKeyTarget: string;
    type: 'OneToMany';
};
export declare type OneToOneSchema = {
    foreignCollection: string;
    originKey: string;
    originKeyTarget: string;
    type: 'OneToOne';
};
export declare type ManyToManySchema = {
    throughCollection: string;
    foreignCollection: string;
    foreignKey: string;
    foreignKeyTarget: string;
    originKey: string;
    originKeyTarget: string;
    type: 'ManyToMany';
};
export declare type ColumnType = PrimitiveTypes | {
    [key: string]: ColumnType;
} | [ColumnType];
export declare type PrimitiveTypes = 'Boolean' | 'Date' | 'Dateonly' | 'Enum' | 'Json' | 'Number' | 'Point' | 'String' | 'Timeonly' | 'Uuid';
export declare type FieldTypes = 'Column' | 'ManyToOne' | 'OneToOne' | 'OneToMany' | 'ManyToMany';
//# sourceMappingURL=schema.d.ts.map