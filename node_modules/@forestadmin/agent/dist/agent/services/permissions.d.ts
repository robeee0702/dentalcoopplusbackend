import { Collection, ConditionTree } from '@forestadmin/datasource-toolkit';
import { Context } from 'koa';
import { AgentOptionsWithDefaults } from '../types';
declare type RolesOptions = Pick<AgentOptionsWithDefaults, 'forestServerUrl' | 'envSecret' | 'isProduction' | 'permissionsCacheDurationInSeconds'>;
export default class PermissionService {
    private options;
    private cache;
    constructor(options: RolesOptions);
    invalidateCache(renderingId: number): void;
    /** Checks that a charting query is in the list of allowed queries */
    canChart(context: Context): Promise<void>;
    /** Check if a user is allowed to perform a specific action */
    can(context: Context, action: string, allowRefetch?: boolean): Promise<void>;
    getScope(collection: Collection, context: Context): Promise<ConditionTree>;
    /** Get cached version of "rendering permissions" */
    private getRenderingPermissions;
}
export {};
//# sourceMappingURL=permissions.d.ts.map