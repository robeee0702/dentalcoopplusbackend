"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CHUNK_SIZE = void 0;
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const format_1 = require("@fast-csv/format");
exports.CHUNK_SIZE = 1000;
class CsvGenerator {
    /**
     * Use an async generator to ensure that
     * - backpressure is properly applied without needing to extend Readable (for slow clients)
     * - we stop making queries to the database if the client closes the connection.
     */
    static async *generate(caller, projection, header, filter, collection, list) {
        yield (0, format_1.writeToString)([header.split(',')], { headers: true, includeEndRowDelimiter: true });
        const limit = filter.page?.limit;
        let skip = filter.page?.skip || 0;
        let areAllRecordsFetched = false;
        const copiedFilter = { ...filter };
        while (!areAllRecordsFetched) {
            let currentPageSize = exports.CHUNK_SIZE;
            if (limit < skip)
                currentPageSize = skip - limit;
            copiedFilter.page = new datasource_toolkit_1.Page(skip, currentPageSize);
            if (!copiedFilter.sort || copiedFilter.sort.length === 0) {
                copiedFilter.sort = datasource_toolkit_1.SortFactory.byPrimaryKeys(collection);
            }
            // eslint-disable-next-line no-await-in-loop
            const records = await list(caller, new datasource_toolkit_1.PaginatedFilter(copiedFilter), projection);
            yield CsvGenerator.convert(records, projection);
            areAllRecordsFetched = records.length < exports.CHUNK_SIZE;
            skip += currentPageSize;
        }
    }
    static convert(records, projection) {
        return (0, format_1.writeToString)(records.map(record => projection.map(field => datasource_toolkit_1.RecordUtils.getFieldValue(record, field))));
    }
}
exports.default = CsvGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZ2VudC91dGlscy9jc3YtZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdFQVN5QztBQUN6Qyw2Q0FBaUQ7QUFFcEMsUUFBQSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBRS9CLE1BQXFCLFlBQVk7SUFDL0I7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQ3BCLE1BQWMsRUFDZCxVQUFzQixFQUN0QixNQUFjLEVBQ2QsTUFBdUIsRUFDdkIsVUFBc0IsRUFDdEIsSUFBd0I7UUFFeEIsTUFBTSxJQUFBLHNCQUFhLEVBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFMUYsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7UUFDakMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDO1FBRWxDLElBQUksb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLE1BQU0sWUFBWSxHQUFHLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUVuQyxPQUFPLENBQUMsb0JBQW9CLEVBQUU7WUFDNUIsSUFBSSxlQUFlLEdBQUcsa0JBQVUsQ0FBQztZQUNqQyxJQUFJLEtBQUssR0FBRyxJQUFJO2dCQUFFLGVBQWUsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO1lBRWpELFlBQVksQ0FBQyxJQUFJLEdBQUcsSUFBSSx5QkFBSSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztZQUVwRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3hELFlBQVksQ0FBQyxJQUFJLEdBQUcsZ0NBQVcsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDM0Q7WUFFRCw0Q0FBNEM7WUFDNUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksb0NBQWUsQ0FBQyxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUVsRixNQUFNLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRWhELG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsa0JBQVUsQ0FBQztZQUNuRCxJQUFJLElBQUksZUFBZSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVPLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBcUIsRUFBRSxVQUFzQjtRQUNsRSxPQUFPLElBQUEsc0JBQWEsRUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxnQ0FBVyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUN6RixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBL0NELCtCQStDQyJ9