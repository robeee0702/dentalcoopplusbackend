import { ConditionTree } from '@forestadmin/datasource-toolkit';
import { IssuerMetadata } from 'openid-client';
import { JSONAPIDocument } from 'json-api-serializer';
import { AgentOptions } from '../../types';
export declare type IpWhitelistConfiguration = {
    isFeatureEnabled: boolean;
    ipRules: Array<{
        type: number;
        ipMinimum?: string;
        ipMaximum?: string;
        ip?: string;
        range?: string;
    }>;
};
export declare type UserInfo = {
    id: number;
    email: string;
    firstName: string;
    lastName: string;
    team: string;
    renderingId: number;
    role: string;
    tags: {
        [key: string]: string;
    };
};
export declare type RenderingPermissions = {
    actions: Set<string>;
    actionsByUser: {
        [actionName: string]: Set<number>;
    };
    scopes: {
        [collectionName: string]: {
            conditionTree: ConditionTree;
            dynamicScopeValues: {
                [userId: number]: {
                    [replacementKey: string]: unknown;
                };
            };
        };
    };
};
declare type HttpOptions = Pick<AgentOptions, 'envSecret' | 'forestServerUrl' | 'isProduction'>;
export default class ForestHttpApi {
    static getIpWhitelistConfiguration(options: HttpOptions): Promise<IpWhitelistConfiguration>;
    static getOpenIdIssuerMetadata(options: HttpOptions): Promise<IssuerMetadata>;
    static getUserInformation(options: HttpOptions, renderingId: number, accessToken: string): Promise<UserInfo>;
    static hasSchema(options: HttpOptions, hash: string): Promise<boolean>;
    static uploadSchema(options: HttpOptions, apimap: JSONAPIDocument): Promise<void>;
    static getPermissions(options: HttpOptions, renderingId: number): Promise<RenderingPermissions>;
    /** Helper to format permissions into something easy to validate against */
    private static decodeChartPermissions;
    /**
     * Helper to format permissions into something easy to validate against
     * Note that the format the server is sending varies depending on if we're using a remote or
     * local environment.
     */
    private static decodeActionPermissions;
    /** Helper to format permissions into something easy to validate against */
    private static decodeScopePermissions;
    private static handleResponseError;
}
export {};
//# sourceMappingURL=forest-http-api.d.ts.map