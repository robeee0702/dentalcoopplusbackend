"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const filterable_1 = __importDefault(require("../agent/utils/forest-schema/filterable"));
class CollectionBuilder {
    constructor(stack, name) {
        this.name = name;
        this.stack = stack;
    }
    /**
     * Disable count in list view pagination for improved performance.
     *
     * @example
     * .disableCount()
     */
    disableCount() {
        this.stack.schema.getCollection(this.name).overrideSchema({ countable: false });
        return this;
    }
    /**
     * Import a field from a many to one or one to one relation.
     *
     * @param name the name of the field that will be created on the collection
     * @param options options to import the field
     * @example
     * .importField('authorName', { path: 'author:fullName' })
     */
    importField(name, options) {
        const collection = this.stack.lateComputed.getCollection(this.name);
        const schema = datasource_toolkit_1.CollectionUtils.getFieldSchema(collection, options.path);
        this.addField(name, {
            beforeRelations: options.beforeRelations,
            columnType: schema.columnType,
            defaultValue: schema.defaultValue,
            dependencies: [options.path],
            getValues: records => records.map(r => datasource_toolkit_1.RecordUtils.getFieldValue(r, options.path)),
            enumValues: schema.enumValues,
        });
        if (!schema.isReadOnly && !options.readonly) {
            this.stack.write.getCollection(this.name).replaceFieldWriting(name, value => {
                const path = options.path.split(':');
                const writingPath = {};
                path.reduce((nestedPath, currentPath, index) => {
                    nestedPath[currentPath] = index === path.length - 1 ? value : {};
                    return nestedPath[currentPath];
                }, writingPath);
                return writingPath;
            });
        }
        if (schema.isReadOnly && options.readonly === false) {
            throw new Error(`Readonly option should not be false because the field "${options.path}" is not writable`);
        }
        for (const operator of schema.filterOperators) {
            const handler = value => ({ field: options.path, operator, value });
            this.replaceFieldOperator(name, operator, handler);
        }
        if (schema.isSortable) {
            this.replaceFieldSorting(name, [
                { field: options.path, ascending: true },
            ]);
        }
        return this;
    }
    /**
     * Allow to rename a field of a given collection.
     * @param oldName the current name of the field in a given collection
     * @param newName the new name of the field
     * @example
     * .renameField('theCurrentNameOfTheField', 'theNewNameOfTheField');
     */
    renameField(oldName, newName) {
        this.stack.renameField.getCollection(this.name).renameField(oldName, newName);
        return this;
    }
    /**
     * Remove field by setting its visibility to false.
     * @param names the fields to remove
     * @example
     * .removeField('aFieldToRemove', 'anotherFieldToRemove');
     */
    removeField(...names) {
        const collection = this.stack.publication.getCollection(this.name);
        for (const name of names)
            collection.changeFieldVisibility(name, false);
        return this;
    }
    /**
     * Add a new action on the collection.
     * @param name the name of the action
     * @param definition the definition of the action
     * @example
     * .addAction('is live', {
     *    scope: 'Single',
     *    execute: async (context, resultBuilder) => {
     *      return resultBuilder.success(`Is live!`);
     *    },
     *  })
     */
    addAction(name, definition) {
        this.stack.action
            .getCollection(this.name)
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .addAction(name, definition);
        return this;
    }
    /**
     * Add a new field on the collection.
     * @param name the name of the field
     * @param definition The definition of the field
     * @example
     * .addField('fullName', {
     *    columnType: 'String',
     *    dependencies: ['firstName', 'lastName'],
     *    getValues: (records) => records.map(record => `${record.lastName} ${record.firstName}`),
     * });
     */
    addField(name, definition) {
        const { beforeRelations, ...computedDefinition } = definition;
        const collection = definition.beforeRelations
            ? this.stack.earlyComputed.getCollection(this.name)
            : this.stack.lateComputed.getCollection(this.name);
        collection.registerComputed(name, computedDefinition);
        return this;
    }
    /**
     * Add a many to one relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param options extra information about the relation
     * @example
     * books.addManyToOneRelation('myAuthor', 'persons', { foreignKey: 'authorId' })
     */
    addManyToOneRelation(name, foreignCollection, options) {
        this.addRelation(name, {
            type: 'ManyToOne',
            foreignCollection,
            foreignKey: options.foreignKey,
            foreignKeyTarget: options.foreignKeyTarget,
        });
        return this;
    }
    /**
     * Add a one to many relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param options extra information about the relation
     * @example
     * persons.addOneToManyRelation('writtenBooks', 'books', { originKey: 'authorId' })
     */
    addOneToManyRelation(name, foreignCollection, options) {
        this.addRelation(name, {
            type: 'OneToMany',
            foreignCollection,
            originKey: options.originKey,
            originKeyTarget: options.originKeyTarget,
        });
        return this;
    }
    /**
     * Add a one to one relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param options extra information about the relation
     * @example
     * persons.addOneToOneRelation('bestFriend', 'persons', { originKey: 'bestFriendId' })
     */
    addOneToOneRelation(name, foreignCollection, options) {
        this.addRelation(name, {
            type: 'OneToOne',
            foreignCollection,
            originKey: options.originKey,
            originKeyTarget: options.originKeyTarget,
        });
        return this;
    }
    /**
     * Add a many to many relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param throughCollection name of the intermediary collection
     * @param options extra information about the relation
     * @example
     * dvds.addManyToManyRelation('rentalsOfThisDvd', 'rentals', 'dvdRentals', {
     *   originKey: 'dvdId',
     *   foreignKey: 'rentalId'
     * })
     */
    addManyToManyRelation(name, foreignCollection, throughCollection, options) {
        this.addRelation(name, {
            type: 'ManyToMany',
            foreignCollection,
            throughCollection,
            originKey: options.originKey,
            originKeyTarget: options.originKeyTarget,
            foreignKey: options.foreignKey,
            foreignKeyTarget: options.foreignKeyTarget,
        });
        return this;
    }
    /**
     * Add a virtual collection into the related data of a record.
     *
     * @param name name of the relation
     * @param definition the definition of the new relation
     * @example
     * .addExternalRelation('states', {
     *   schema: { code: 'Number', name: 'String' },
     *   listRecords: ({ id }) => {
     *     return record.id == 34 ?
     *      [{ code: 'AL', name: 'Alabama' }, { code: 'AK', name: 'Alaska' }] :
     *      [{ code: 'AZ', name: 'Arizona' }, { code: 'TX', name: 'Texas' }];
     *   }
     * })
     */
    addExternalRelation(name, definition) {
        const { schema } = this.stack.action.getCollection(this.name);
        const primaryKeys = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(schema);
        return this.addField(name, {
            dependencies: definition.dependencies ?? primaryKeys,
            columnType: [definition.schema],
            getValues: async (records, context) => Promise.all(records.map(async (record) => definition.listRecords(record, context))),
        });
    }
    /**
     * Add a new segment on the collection.
     * @param name the name of the segment
     * @param definition a function used to generate a condition tree
     * or a condition tree
     * @example
     * .addSegment(
     *    'Wrote more than 2 books',
     *    { field: 'booksCount', operator: 'GreaterThan', value: 2 }
     * );
     */
    addSegment(name, definition) {
        this.stack.segment.getCollection(this.name).addSegment(name, definition);
        return this;
    }
    /**
     * Enable sorting on a specific field using emulation.
     * As for all the emulation method, the field sorting will be done in-memory.
     * @param name the name of the field to enable emulation on
     * @example
     * .emulateFieldSorting('fullName');
     */
    emulateFieldSorting(name) {
        this.stack.sortEmulate.getCollection(this.name).emulateFieldSorting(name);
        return this;
    }
    /**
     * Replace an implementation for the sorting.
     * The field sorting will be done by the datasource.
     * @param name the name of the field to enable sort
     * @param equivalentSort the sort equivalent
     * @example
     * .replaceFieldSorting(
     *   'fullName',
     *   [
     *     { field: 'firstName', ascending: true },
     *     { field: 'lastName',  ascending: true },
     *   ]
     * )
     */
    replaceFieldSorting(name, equivalentSort) {
        this.stack.sortEmulate
            .getCollection(this.name)
            .replaceFieldSorting(name, equivalentSort);
        return this;
    }
    /**
     * Enable filtering on a specific field using emulation.
     * As for all the emulation method, the field filtering will be done in-memory.
     * @param name the name of the field to enable emulation on
     * @example
     * .emulateFieldFiltering('aField');
     */
    emulateFieldFiltering(name) {
        const collection = this.stack.lateOpEmulate.getCollection(this.name);
        const field = collection.schema.fields[name];
        for (const operator of filterable_1.default.getRequiredOperators(field.columnType)) {
            if (!field.filterOperators?.has(operator)) {
                this.emulateFieldOperator(name, operator);
            }
        }
        return this;
    }
    /**
     * Enable filtering on a specific field with a specific operator using emulation.
     * As for all the emulation method, the field filtering will be done in-memory.
     * @param name the name of the field to enable emulation on
     * @param operator the operator to emulate
     * @example
     * .emulateFieldOperator('aField', 'In');
     */
    emulateFieldOperator(name, operator) {
        const collection = this.stack.earlyOpEmulate.getCollection(this.name).schema.fields[name]
            ? this.stack.earlyOpEmulate.getCollection(this.name)
            : this.stack.lateOpEmulate.getCollection(this.name);
        collection.emulateFieldOperator(name, operator);
        return this;
    }
    /**
     * Replace an implementation for a specific operator on a specific field.
     * The operator replacement will be done by the datasource.
     * @param name the name of the field to filter on
     * @param operator the operator to replace
     * @param replacer the proposed implementation
     * @example
     * .replaceFieldOperator('fullName', 'Contains', (value) => {
     *    return {
     *      aggregator: 'Or',
     *      conditions: [{
     *        field: 'firstName',
     *        operator: 'Contains',
     *        value
     *      }, {
     *        field: 'lastName',
     *        operator: 'Contains',
     *        value
     *      }]
     *    }
     * });
     */
    replaceFieldOperator(name, operator, replacer) {
        const collection = this.stack.earlyOpEmulate.getCollection(this.name).schema.fields[name]
            ? this.stack.earlyOpEmulate.getCollection(this.name)
            : this.stack.lateOpEmulate.getCollection(this.name);
        collection.replaceFieldOperator(name, operator, replacer);
        return this;
    }
    /**
     * Replace the write behavior of a field.
     * @param name the name of the field
     * @param definition the function or a value to represent the write behavior
     * @example
     * .replaceFieldWriting('fullName', fullName => {
     *   const [firstName, lastName] = fullName.split(' ');
     *   return { firstName, lastName };
     * });
     */
    replaceFieldWriting(name, definition) {
        this.stack.write.getCollection(this.name).replaceFieldWriting(name, definition);
        return this;
    }
    /**
     * Replace the behavior of the search bar
     * @param definition handler to describe the new behavior
     * @example
     * .replaceSearch(async (searchString) => {
     *   return { field: 'name', operator: 'Contains', value: searchString };
     * });
     */
    replaceSearch(definition) {
        this.stack.search
            .getCollection(this.name)
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .replaceSearch(definition);
        return this;
    }
    addHook(position, type, handler) {
        this.stack.hook
            .getCollection(this.name)
            .addHook(position, type, handler);
        return this;
    }
    /**
     * Add a relation between two collections.
     * @param name name of the new relation
     * @param definition definition of the new relation
     * @example
     * .addRelation('author', {
     *   type: 'ManyToOne',
     *   foreignCollection: 'persons',
     *   foreignKey: 'authorId'
     * });
     */
    addRelation(name, definition) {
        this.stack.relation.getCollection(this.name).addRelation(name, definition);
        return this;
    }
}
exports.default = CollectionBuilder;
//# sourceMappingURL=data:application/json;base64,