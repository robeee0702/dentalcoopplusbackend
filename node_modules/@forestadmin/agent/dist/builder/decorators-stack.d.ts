import { ActionCollectionDecorator, ChartDataSourceDecorator, ComputedCollectionDecorator, DataSource, DataSourceDecorator, EmptyCollectionDecorator, HookCollectionDecorator, OperatorsEmulateCollectionDecorator, OperatorsReplaceCollectionDecorator, PublicationCollectionDecorator, RelationCollectionDecorator, RenameFieldCollectionDecorator, SchemaCollectionDecorator, SearchCollectionDecorator, SegmentCollectionDecorator, SortEmulateCollectionDecorator, WriteCollectionDecorator } from '@forestadmin/datasource-toolkit';
export default class DecoratorsStack {
    action: DataSourceDecorator<ActionCollectionDecorator>;
    chart: ChartDataSourceDecorator;
    earlyComputed: DataSourceDecorator<ComputedCollectionDecorator>;
    earlyOpEmulate: DataSourceDecorator<OperatorsEmulateCollectionDecorator>;
    earlyOpReplace: DataSourceDecorator<OperatorsReplaceCollectionDecorator>;
    empty: DataSourceDecorator<EmptyCollectionDecorator>;
    relation: DataSourceDecorator<RelationCollectionDecorator>;
    lateComputed: DataSourceDecorator<ComputedCollectionDecorator>;
    lateOpEmulate: DataSourceDecorator<OperatorsEmulateCollectionDecorator>;
    lateOpReplace: DataSourceDecorator<OperatorsReplaceCollectionDecorator>;
    publication: DataSourceDecorator<PublicationCollectionDecorator>;
    renameField: DataSourceDecorator<RenameFieldCollectionDecorator>;
    schema: DataSourceDecorator<SchemaCollectionDecorator>;
    search: DataSourceDecorator<SearchCollectionDecorator>;
    segment: DataSourceDecorator<SegmentCollectionDecorator>;
    sortEmulate: DataSourceDecorator<SortEmulateCollectionDecorator>;
    write: DataSourceDecorator<WriteCollectionDecorator>;
    hook: DataSourceDecorator<HookCollectionDecorator>;
    dataSource: DataSource;
    constructor(dataSource: DataSource);
}
//# sourceMappingURL=decorators-stack.d.ts.map