/// <reference types="node" />
import { CollectionCustomizationContext, ComputedDefinition, PrimitiveTypes, TCollectionName, TFieldName, TRow, TSchema } from '@forestadmin/datasource-toolkit';
import { IncomingMessage, ServerResponse } from 'http';
export declare type FieldDefinition<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> = ComputedDefinition<S, N> & {
    beforeRelations?: boolean;
};
export declare type OneToManyEmbeddedDefinition<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> = {
    schema: Record<string, PrimitiveTypes>;
    dependencies?: TFieldName<S, N>[];
    listRecords(records: TRow<S, N>, context: CollectionCustomizationContext<S, N>): Promise<unknown[]> | unknown[];
};
export declare type HttpCallback = (req: IncomingMessage, res: ServerResponse) => void;
export declare type DataSourceOptions = {
    rename?: {
        [oldName: string]: string;
    };
};
//# sourceMappingURL=types.d.ts.map