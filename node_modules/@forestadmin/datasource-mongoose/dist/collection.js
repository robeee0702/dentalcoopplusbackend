"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const helpers_1 = require("./utils/helpers");
const fields_1 = __importDefault(require("./utils/schema/fields"));
const filter_1 = __importDefault(require("./utils/pipeline/filter"));
const group_1 = __importDefault(require("./utils/pipeline/group"));
const lookup_1 = __importDefault(require("./utils/pipeline/lookup"));
const schema_1 = __importDefault(require("./mongoose/schema"));
const projection_1 = __importDefault(require("./utils/pipeline/projection"));
const reparent_1 = __importDefault(require("./utils/pipeline/reparent"));
const virtual_fields_1 = __importDefault(require("./utils/pipeline/virtual-fields"));
class MongooseCollection extends datasource_toolkit_1.BaseCollection {
    constructor(dataSource, model, prefix = null, ignoredFields = []) {
        super(prefix ? (0, helpers_1.escape)(`${model.modelName}.${prefix}`) : model.modelName, dataSource);
        this.model = model;
        this.prefix = prefix;
        this.ignoredFields = ignoredFields;
        this.enableCount();
        this.addFields(fields_1.default.buildFieldsSchema(model, prefix, ignoredFields));
    }
    async create(caller, data) {
        // If there is no prefix, we can delegate the work to mongoose directly.
        if (!this.prefix) {
            const { insertedIds } = await this.model.insertMany(data, { rawResult: true });
            return data.map((record, index) => ({ _id: insertedIds[index], ...record }));
        }
        // Transform list of subrecords to a list of modifications that we'll apply to the root record.
        const fieldName = this.prefix.substring(this.prefix.lastIndexOf('.') + 1);
        const schema = schema_1.default.fromModel(this.model).getSubSchema(this.prefix);
        const updates = new Map();
        const results = [];
        for (const record of data) {
            const { _pid, ...rest } = record;
            if (!_pid)
                throw new datasource_toolkit_1.ValidationError('Trying to create a subrecord with no parent');
            const [rootId, path] = (0, helpers_1.splitId)(`${_pid}.${fieldName}`);
            if (!updates.has(rootId))
                updates.set(rootId, { path, records: [] });
            // unwrap 'content' on leafs
            updates.get(rootId).records.push(schema.isLeaf ? rest.content : rest);
            results.push({
                _id: schema.isArray // arrays have indexes in their ids
                    ? `${rootId}.${path}.${updates.get(rootId).records.length - 1}`
                    : `${rootId}.${path}`,
                ...record,
            });
        }
        // Apply the modifications to the root document.
        const promises = [...updates.entries()].map(async ([rootId, { path, records }]) => this.model.updateOne({ _id: rootId }, schema.isArray
            ? { $push: { [path]: { $each: records, position: 0 } } }
            : { $set: { [path]: records[0] } }, { rawResult: true }));
        await Promise.all(promises);
        return results;
    }
    async list(caller, filter, projection) {
        const lookupProjection = projection.union(filter.conditionTree?.projection, filter.sort?.projection);
        const records = await this.model.aggregate([
            ...this.buildBasePipeline(filter, lookupProjection),
            ...projection_1.default.project(projection),
        ]);
        return (0, helpers_1.replaceMongoTypes)(records);
    }
    async update(caller, filter, patch) {
        const records = await this.list(caller, filter, new datasource_toolkit_1.Projection('_id'));
        const ids = records.map(record => record._id);
        if (!this.prefix) {
            await this.model.updateMany({ _id: ids }, patch, { rawResult: true });
            return;
        }
        // Clean patch
        const schema = schema_1.default.fromModel(this.model).getSubSchema(this.prefix);
        let cleanPatch = { ...patch };
        delete cleanPatch._id; // Virtual field
        delete cleanPatch._pid; // Ignore _pids: they should not be editable from the frontend.
        if (Object.keys(cleanPatch).length === 0)
            return;
        if (schema.isLeaf)
            cleanPatch = cleanPatch.content;
        // Perform update
        const idsByPath = (0, helpers_1.groupIdsByPath)(ids);
        const promises = Object.entries(idsByPath).map(async ([path, rootIds]) => this.model.updateMany({ _id: rootIds }, { [path]: cleanPatch }, { rawResult: true }));
        await Promise.all(promises);
    }
    async delete(caller, filter) {
        const records = await this.list(caller, filter, new datasource_toolkit_1.Projection('_id'));
        const ids = records.map(record => record._id);
        if (!this.prefix) {
            await this.model.deleteMany({ _id: ids }, { rawResult: true });
            return;
        }
        const schema = schema_1.default.fromModel(this.model).getSubSchema(this.prefix);
        const idsByPath = (0, helpers_1.groupIdsByPath)(ids);
        if (schema.isArray) {
            for (const path of Object.keys(idsByPath).sort(helpers_1.compareIds).reverse()) {
                const arrayPath = path.substring(0, path.lastIndexOf('.'));
                const index = Number(path.substring(path.lastIndexOf('.') + 1));
                // There is no update operator to pop items out of arrays at known positions
                // => we use an aggregation pipeline in the update operation
                // @see https://jira.mongodb.org/browse/SERVER-1014?focusedCommentId=2305681#comment-2305681
                const newArrayValue = [
                    { $slice: [`$${arrayPath}`, index] },
                    { $slice: [`$${arrayPath}`, index + 1, { $size: `$${arrayPath}` }] },
                ];
                // When updating arrays, indexes will change with each request so we need to perform the
                // request sequentially.
                // eslint-disable-next-line no-await-in-loop
                await this.model.collection.updateMany({ _id: { $in: idsByPath[path] } }, [{ $set: { [arrayPath]: { $concatArrays: newArrayValue } } }], {});
            }
        }
        else {
            const promises = Object.entries(idsByPath).map(([path, pathIds]) => this.model.collection.updateMany({ _id: { $in: pathIds } }, { $unset: { [path]: '' } }, {}));
            await Promise.all(promises);
        }
    }
    async aggregate(caller, filter, aggregation, limit) {
        const lookupProjection = aggregation.projection.union(filter.conditionTree?.projection);
        const rows = await this.model.aggregate([
            ...this.buildBasePipeline(filter, lookupProjection),
            ...group_1.default.group(aggregation),
            { $sort: { value: -1 } },
            ...(limit ? [{ $limit: limit }] : []),
        ]);
        return (0, helpers_1.replaceMongoTypes)(rows);
    }
    buildBasePipeline(filter, lookupProjection) {
        return [
            ...reparent_1.default.reparent(this.model, this.prefix),
            ...virtual_fields_1.default.addVirtual(this.model, this.prefix, this.ignoredFields, lookupProjection),
            ...lookup_1.default.lookup(this.model, this.prefix, lookupProjection),
            ...filter_1.default.filter(this.model, this.prefix, filter),
        ];
    }
}
exports.default = MongooseCollection;
//# sourceMappingURL=data:application/json;base64,