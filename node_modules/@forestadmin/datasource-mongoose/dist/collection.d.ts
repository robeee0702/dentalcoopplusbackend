import { AggregateResult, Aggregation, BaseCollection, Caller, DataSource, Filter, PaginatedFilter, Projection, RecordData, TSchema } from '@forestadmin/datasource-toolkit';
import { Model } from 'mongoose';
export default class MongooseCollection extends BaseCollection {
    model: Model<RecordData>;
    prefix: string;
    ignoredFields: string[];
    constructor(dataSource: DataSource, model: Model<RecordData>, prefix?: string, ignoredFields?: string[]);
    create(caller: Caller, data: RecordData[]): Promise<RecordData[]>;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    delete(caller: Caller, filter: Filter): Promise<void>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult<TSchema, string>[]>;
    private buildBasePipeline;
}
//# sourceMappingURL=collection.d.ts.map