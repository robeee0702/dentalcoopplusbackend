"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_1 = __importDefault(require("./collection"));
const schema_1 = __importDefault(require("./mongoose/schema"));
const relations_1 = __importDefault(require("./utils/schema/relations"));
class MongooseDatasource extends datasource_toolkit_1.BaseDataSource {
    constructor(connection, options = {}) {
        super();
        // Create collections (with only many to one relations).
        for (const model of Object.values(connection.models)) {
            this.addModel(model, this.getCuts(options, model));
        }
        // Add one-to-many, one-to-one and many-to-many relations.
        relations_1.default.addImplicitRelations(this.collections);
    }
    /** Create all collections for a given model */
    addModel(model, cuts, prefix = null) {
        const ignore = [...new Set([...cuts.columns, ...Object.keys(cuts.relations)])];
        this.addCollection(new collection_1.default(this, model, prefix, ignore));
        for (const name of ignore) {
            const subProjection = cuts.relations[name] ?? new datasource_toolkit_1.Projection();
            const subPrefix = prefix ? `${prefix}.${name}` : name;
            this.addModel(model, subProjection, subPrefix);
        }
    }
    /** Get list of cuts for a given model */
    getCuts(options, model) {
        // A list was provided by the customer, use it.
        if (options?.asModels?.[model.modelName]) {
            return new datasource_toolkit_1.Projection(...options.asModels[model.modelName].map(item => item.replace(/\./g, ':')));
        }
        // When no cuts are provided, only cut on list of references
        const schema = schema_1.default.fromModel(model);
        return new datasource_toolkit_1.Projection(...Object.keys(schema.fields).filter(field => schema.fields[field]?.['[]']?.options?.ref));
    }
}
exports.default = MongooseDatasource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBQTZFO0FBSTdFLDhEQUE4QztBQUM5QywrREFBK0M7QUFDL0MseUVBQXlEO0FBRXpELE1BQXFCLGtCQUFtQixTQUFRLG1DQUFrQztJQUNoRixZQUFZLFVBQXNCLEVBQUUsVUFBMkIsRUFBRTtRQUMvRCxLQUFLLEVBQUUsQ0FBQztRQUVSLHdEQUF3RDtRQUN4RCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCwwREFBMEQ7UUFDMUQsbUJBQWlCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCwrQ0FBK0M7SUFDdkMsUUFBUSxDQUFDLEtBQXFCLEVBQUUsSUFBZ0IsRUFBRSxTQUFpQixJQUFJO1FBQzdFLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9FLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxvQkFBa0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXhFLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO1lBQ3pCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSwrQkFBVSxFQUFFLENBQUM7WUFDL0QsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3RELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7SUFFRCx5Q0FBeUM7SUFDakMsT0FBTyxDQUFDLE9BQXdCLEVBQUUsS0FBcUI7UUFDN0QsK0NBQStDO1FBQy9DLElBQUksT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN4QyxPQUFPLElBQUksK0JBQVUsQ0FDbkIsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUMzRSxDQUFDO1NBQ0g7UUFFRCw0REFBNEQ7UUFDNUQsTUFBTSxNQUFNLEdBQUcsZ0JBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFL0MsT0FBTyxJQUFJLCtCQUFVLENBQ25CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FDMUYsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTFDRCxxQ0EwQ0MifQ==