"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const schema_1 = __importDefault(require("../../mongoose/schema"));
/**
 * Generate pipeline to query submodels.
 *
 * The operations make rotations in the documents so that the root is changed to the submodel
 * without loosing the parent (which may be needed later on).
 */
class ReparentGenerator {
    static reparent(model, prefix) {
        if (!prefix?.length)
            return [];
        // Take only the part of the records we are interested in
        const pipeline = [];
        let schema = schema_1.default.fromModel(model).fields;
        for (const part of prefix.split('.')) {
            pipeline.push(...(schema[part]['[]']
                ? this.reparentArray(part, schema[part]['[]'] instanceof mongoose_1.SchemaType)
                : this.reparentObject(part, schema[part] instanceof mongoose_1.SchemaType)));
            schema = schema[part];
            if (schema['[]'])
                schema = schema['[]'];
        }
        // If we end up on a field, create a virtual record
        return pipeline;
    }
    static reparentArray(prefix, inDoc) {
        return [
            { $unwind: { path: `$${prefix}`, includeArrayIndex: 'index' } },
            {
                $replaceRoot: {
                    newRoot: {
                        $mergeObjects: [
                            inDoc ? { content: `$${prefix}` } : `$${prefix}`,
                            {
                                _id: { $concat: [{ $toString: '$_id' }, `.${prefix}.`, { $toString: '$index' }] },
                                _pid: '$_id',
                                parent: '$$ROOT',
                            },
                        ],
                    },
                },
            },
        ];
    }
    static reparentObject(prefix, inDoc) {
        return [
            {
                $replaceRoot: {
                    newRoot: {
                        $mergeObjects: [
                            inDoc ? { content: `$${prefix}` } : `$${prefix}`,
                            {
                                _id: { $concat: [{ $toString: '$_id' }, `.${prefix}`] },
                                _pid: '$_id',
                                parent: '$$ROOT',
                            },
                        ],
                    },
                },
            },
        ];
    }
}
exports.default = ReparentGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwYXJlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvcGlwZWxpbmUvcmVwYXJlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBNEQ7QUFDNUQsbUVBQW1FO0FBRW5FOzs7OztHQUtHO0FBQ0gsTUFBcUIsaUJBQWlCO0lBQ3BDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBcUIsRUFBRSxNQUFjO1FBQ25ELElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTTtZQUFFLE9BQU8sRUFBRSxDQUFDO1FBRS9CLHlEQUF5RDtRQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxNQUFNLEdBQWUsZ0JBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRWhFLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxRQUFRLENBQUMsSUFBSSxDQUNYLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLHFCQUFVLENBQUM7Z0JBQ3BFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVkscUJBQVUsQ0FBQyxDQUFDLENBQ25FLENBQUM7WUFFRixNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQztnQkFBRSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsbURBQW1EO1FBQ25ELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQWMsRUFBRSxLQUFjO1FBQ3pELE9BQU87WUFDTCxFQUFFLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLE1BQU0sRUFBRSxFQUFFLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQy9EO2dCQUNFLFlBQVksRUFBRTtvQkFDWixPQUFPLEVBQUU7d0JBQ1AsYUFBYSxFQUFFOzRCQUNiLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sRUFBRTs0QkFDaEQ7Z0NBQ0UsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFO2dDQUNqRixJQUFJLEVBQUUsTUFBTTtnQ0FDWixNQUFNLEVBQUUsUUFBUTs2QkFDakI7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDO0lBRU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFjLEVBQUUsS0FBYztRQUMxRCxPQUFPO1lBQ0w7Z0JBQ0UsWUFBWSxFQUFFO29CQUNaLE9BQU8sRUFBRTt3QkFDUCxhQUFhLEVBQUU7NEJBQ2IsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxFQUFFOzRCQUNoRDtnQ0FDRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLE1BQU0sRUFBRSxDQUFDLEVBQUU7Z0NBQ3ZELElBQUksRUFBRSxNQUFNO2dDQUNaLE1BQU0sRUFBRSxRQUFROzZCQUNqQjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTdERCxvQ0E2REMifQ==