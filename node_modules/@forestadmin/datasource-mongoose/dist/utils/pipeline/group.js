"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** Transform a forest admin aggregation into mongo pipeline */
class GroupGenerator {
    static group(aggregation) {
        return [
            {
                $group: {
                    _id: this.computeGroups(aggregation.groups),
                    value: this.computeValue(aggregation),
                },
            },
            {
                $project: {
                    _id: 0,
                    value: '$value',
                    group: this.computeGroupsProjection(aggregation.groups),
                },
            },
        ];
    }
    /** Compute aggregation value */
    static computeValue(aggregation) {
        // Handle count(*) case
        if (!aggregation.field)
            return { $sum: 1 };
        // General case
        const field = `$${aggregation.field.replace(/:/g, '.')}`;
        return aggregation.operation === 'Count'
            ? { $sum: { $cond: [{ $ne: [field, null] }, 1, 0] } }
            : { [this.AGGREGATION_OPERATION[aggregation.operation]]: field };
    }
    /** Compute _id field for the $group pipeline stage */
    static computeGroups(groups) {
        return (groups ?? []).reduce((memo, group) => {
            let field = `$${group.field.replace(/:/g, '.')}`;
            if (group.operation) {
                if (group.operation === 'Week') {
                    const date = { $dateTrunc: { date: field, startOfWeek: 'Monday', unit: 'week' } };
                    field = { $dateToString: { format: this.GROUP_OPERATION[group.operation], date } };
                }
                else {
                    field = { $dateToString: { format: this.GROUP_OPERATION[group.operation], date: field } };
                }
            }
            return { ...(memo ?? {}), [group.field]: field };
        }, null);
    }
    /** Move fields in _id to the root of the document */
    static computeGroupsProjection(groups) {
        return groups?.length
            ? groups.reduce((memo, group) => ({ ...memo, [group.field]: `$_id.${group.field}` }), {})
            : { $literal: {} };
    }
}
exports.default = GroupGenerator;
GroupGenerator.AGGREGATION_OPERATION = {
    Sum: '$sum',
    Avg: '$avg',
    Count: '$sum',
    Max: '$max',
    Min: '$min',
};
GroupGenerator.GROUP_OPERATION = {
    Year: '%Y-01-01',
    Month: '%Y-%m-01',
    Day: '%Y-%m-%d',
    Week: '%Y-%m-%d',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvcGlwZWxpbmUvZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSwrREFBK0Q7QUFDL0QsTUFBcUIsY0FBYztJQWdCakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUF3QjtRQUNuQyxPQUFPO1lBQ0w7Z0JBQ0UsTUFBTSxFQUFFO29CQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7b0JBQzNDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztpQkFDdEM7YUFDRjtZQUNEO2dCQUNFLFFBQVEsRUFBRTtvQkFDUixHQUFHLEVBQUUsQ0FBQztvQkFDTixLQUFLLEVBQUUsUUFBUTtvQkFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7aUJBQ3hEO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELGdDQUFnQztJQUN4QixNQUFNLENBQUMsWUFBWSxDQUFDLFdBQXdCO1FBQ2xELHVCQUF1QjtRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUs7WUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBRTNDLGVBQWU7UUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBRXpELE9BQU8sV0FBVyxDQUFDLFNBQVMsS0FBSyxPQUFPO1lBQ3RDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDckQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDckUsQ0FBQztJQUVELHNEQUFzRDtJQUM5QyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQTZCO1FBQ3hELE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzNDLElBQUksS0FBSyxHQUFZLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFFMUQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUNuQixJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssTUFBTSxFQUFFO29CQUM5QixNQUFNLElBQUksR0FBRyxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQztvQkFDbEYsS0FBSyxHQUFHLEVBQUUsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUM7aUJBQ3BGO3FCQUFNO29CQUNMLEtBQUssR0FBRyxFQUFFLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztpQkFDM0Y7YUFDRjtZQUVELE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ25ELENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRCxxREFBcUQ7SUFDN0MsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQTZCO1FBQ2xFLE9BQU8sTUFBTSxFQUFFLE1BQU07WUFDbkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN6RixDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7QUF0RUgsaUNBdUVDO0FBdEVnQixvQ0FBcUIsR0FBeUM7SUFDM0UsR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsTUFBTTtJQUNYLEtBQUssRUFBRSxNQUFNO0lBQ2IsR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsTUFBTTtDQUNaLENBQUM7QUFFYSw4QkFBZSxHQUFrQztJQUM5RCxJQUFJLEVBQUUsVUFBVTtJQUNoQixLQUFLLEVBQUUsVUFBVTtJQUNqQixHQUFHLEVBQUUsVUFBVTtJQUNmLElBQUksRUFBRSxVQUFVO0NBQ2pCLENBQUMifQ==