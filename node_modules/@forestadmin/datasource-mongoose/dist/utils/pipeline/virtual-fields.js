"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = __importDefault(require("../../mongoose/schema"));
/**
 * When using the `asModel` options, users can request/filter on the virtual _id and _pid fields
 * of children (using the generated OneToOne relation).
 *
 * As those fields are not written to mongo, they are injected here so that they can be used like
 * any other field.
 *
 * This could be also be done by preprocessing the filter, and postprocessing the records, but this
 * solution seemed simpler, at the cost of additional pipeline stages when making queries.
 *
 * Note that a projection is taken as a parameter so that only fields which are actually used are
 * injected to save resources.
 */
class VirtualFieldsGenerator {
    static addVirtual(model, prefix, ignoredFields, projection) {
        const schema = schema_1.default.fromModel(model).getSubSchema(prefix, true);
        const set = {};
        for (const [relation, subProjection] of Object.entries(projection.relations)) {
            // if it is a virtual one to one (<=> inverse of "parent")
            if (ignoredFields.includes(relation)) {
                const virtuals = this.getVirtuals(relation, schema.getSubSchema(relation, true), subProjection);
                for (const [key, value] of Object.entries(virtuals)) {
                    set[key] = value;
                }
            }
        }
        return Object.keys(set).length ? [{ $addFields: set }] : [];
    }
    static getVirtuals(path, schema, projection) {
        const result = {};
        if (projection.columns.includes('_id')) {
            result[`${path}._id`] = { $concat: [{ $toString: '$_id' }, `.${path}`] };
        }
        if (projection.columns.includes('_pid')) {
            const dotIndex = path.lastIndexOf('.');
            const parentPath = dotIndex !== -1 ? path.substring(0, dotIndex) : null;
            result[`${path}._pid`] = parentPath
                ? { $concat: [{ $toString: '$_id' }, `.${parentPath}`] }
                : '$_id';
        }
        if (projection.columns.includes('content') && schema.isLeaf) {
            result[`${path}.content`] = `$${path}`;
        }
        for (const [relation, subProjection] of Object.entries(projection.relations)) {
            // If we're asking for data that is inside of this mongo document (and not a __manyToOne)
            // This condition should be equivalent to `!relation.endWith('__manyToOne')` but we want
            // to get rid of the fact that the code depends on the naming.
            if (schema.fields[relation]) {
                const subVirtuals = this.getVirtuals(`${path}.${relation}`, schema.getSubSchema(relation, true), subProjection);
                for (const [key, value] of Object.entries(subVirtuals)) {
                    result[key] = value;
                }
            }
        }
        return result;
    }
}
exports.default = VirtualFieldsGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1maWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvcGlwZWxpbmUvdmlydHVhbC1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxtRUFBbUQ7QUFFbkQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBcUIsc0JBQXNCO0lBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQ2YsS0FBcUIsRUFDckIsTUFBYyxFQUNkLGFBQXVCLEVBQ3ZCLFVBQXNCO1FBRXRCLE1BQU0sTUFBTSxHQUFHLGdCQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUUsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBRWYsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzVFLDBEQUEwRDtZQUMxRCxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQy9CLFFBQVEsRUFDUixNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFDbkMsYUFBYSxDQUNkLENBQUM7Z0JBRUYsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ25ELEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ2xCO2FBQ0Y7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzlELENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUNoQixJQUFZLEVBQ1osTUFBc0IsRUFDdEIsVUFBc0I7UUFFdEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRWxCLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzFFO1FBRUQsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sVUFBVSxHQUFHLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN4RSxNQUFNLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLFVBQVU7Z0JBQ2pDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksVUFBVSxFQUFFLENBQUMsRUFBRTtnQkFDeEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNaO1FBRUQsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzNELE1BQU0sQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztTQUN4QztRQUVELEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUM1RSx5RkFBeUY7WUFDekYsd0ZBQXdGO1lBQ3hGLDhEQUE4RDtZQUM5RCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQ2xDLEdBQUcsSUFBSSxJQUFJLFFBQVEsRUFBRSxFQUNyQixNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFDbkMsYUFBYSxDQUNkLENBQUM7Z0JBRUYsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7b0JBQ3RELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ3JCO2FBQ0Y7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRjtBQXRFRCx5Q0FzRUMifQ==