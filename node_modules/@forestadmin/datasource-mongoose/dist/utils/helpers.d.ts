/**
 * Replace dots by underscores.
 *
 * @example
 * escape('a.b') == 'a_b'
 */
export declare function escape(str: string): string;
/**
 * Set a value in a plain object recursively
 *
 * @example
 * const a = {};
 * recursiveSet(a, 'field.subfield', 42);
 * a == { field: { subfield: 42 } }
 */
export declare function recursiveSet(target: any, path: string, value: unknown): void;
/**
 * Compare two ids.
 * This is useful to ensure we perform array operations in the right order.
 *
 * @example
 * compareIds('a.20.a', 'a.1.b') => 1 (because 1 < 20)
 * compareIds('a.0.a', 'b.1.b') => -1 (because 'a' < 'b')
 */
export declare function compareIds(a: string, b: string): number;
/**
 * Split the fake ids which are generated when using the `asModel` option into rootId + path.
 *
 * @example
 * splitId('123.some.path.0.to.the.item) == [123, 'some.path.0.to.the.item]
 */
export declare function splitId(id: string): [unknown, string];
/**
 * Group the fake ids which are generated when using the `asModel` option by the path they are
 * targeting to help performing requests.
 *
 * @example
 * groupIdsByPath(['123.field', '456.field']) == { field: [123, 456] }
 */
export declare function groupIdsByPath(ids: string[]): {
    [path: string]: unknown[];
};
/**
 * Replace ObjectId and Date instances in records by strings.
 *
 * @example
 * replaceMongoTypes({_id: ObjectId('12312321313'), createdAt: Date() })
 * == { _id: '12312321313', createdAt: '2010-01-01T00:00:00Z' }
 */
export declare function replaceMongoTypes(records: any): any;
//# sourceMappingURL=helpers.d.ts.map